{*******************************************************}
{                                                       }
{                        EhLib 8.2                      }
{                                                       }
{          Tool Controls for GridsEh component          }
{                      Build 8.2.004                    }
{                                                       }
{   Copyright (c) 2013-2015 by Dmitry V. Bolshakov      }
{                                                       }
{*******************************************************}

{$I EhLib.Inc}

unit GridToolCtrlsEh;

interface

uses Windows, SysUtils, Messages, Classes, Controls, Forms, StdCtrls,
{$IFDEF EH_LIB_6} Variants, Types, {$ENDIF}
{$IFDEF EH_LIB_7} Themes, UxTheme, {$ENDIF}
{$IFDEF EH_LIB_17} System.UITypes, {$ENDIF}
{$IFDEF FPC}
  EhLibLCL, LCLType, LMessages, Win32Int,
{$ELSE}
  EhLibVCL,
{$ENDIF}
  ToolCtrlsEh,
  Graphics, DBCtrls,
  ExtCtrls, Buttons, Menus;

type

{ TControlScrollBarEh }

  TControlScrollBarEh = class(TScrollBar)
  private
    procedure WMLButtonDown(var Message: TWMLButtonDown); message WM_LBUTTONDOWN;
    procedure WMRButtonDown(var Message: TWMRButtonDown); message WM_RBUTTONDOWN;
    procedure WMMButtonDown(var Message: TWMMButtonDown); message WM_MBUTTONDOWN;
    procedure WMMouseActivate(var Message: TMessage); message WM_MOUSEACTIVATE;
    procedure CMDesignHitTest(var Msg: TCMDesignHitTest); message CM_DESIGNHITTEST;
  public
    procedure SetBounds(ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); override;
  end;

{ TGridScrollBarPanelControlEh }

  TGridScrollBarPanelControlEh = class(TCustomPanel)
  private
    FScrollBar: TScrollBar;
    FKeepMaxSizeInDefault: Boolean;
//    FTBNavigator: TToolBar;
    function GetOnScroll: TScrollEvent;
    procedure SetOnScroll(const Value: TScrollEvent);
    procedure SetKeepMaxSizeInDefault(const Value: Boolean);

  protected
    FKind: TScrollBarKind;

    function ScrollBatCode: Integer;
    function ChildControlCanMouseDown(AControl: TControl): Boolean; virtual;
    procedure AlignControls(AControl: TControl; var Rect: TRect); override;
    procedure Resize; override;
    procedure CreateHandle; override;
    procedure OnScrollEvent(Sender: TObject; ScrollCode: TScrollCode; var ScrollPos: Integer);

  public
    constructor Create(AOwner: TComponent; AKind: TScrollBarKind); reintroduce;
    destructor Destroy; override;

    function MaxSizeForExtraPanel: Integer;
    procedure AdjustSize; override;
    procedure Invalidate; override;
    procedure SetParams(APosition, AMin, AMax, APageSize: Integer);

    property OnScroll: TScrollEvent read GetOnScroll write SetOnScroll;
    property ScrollBar: TScrollBar read FScrollBar;
    property KeepMaxSizeInDefault: Boolean read FKeepMaxSizeInDefault write SetKeepMaxSizeInDefault;
  end;

  TGripActiveStatusEh = (gasNeverEh, gasAutoEh, gasAlwaysEh);

  { TSizeGripPanelEh }

  TSizeGripPanelEh = class(TCustomPanel)
  private
    FTriangleWindow: Boolean;
    FGripActiveStatus: TGripActiveStatusEh;
    FPosition: TSizeGripPosition;
    procedure WMEraseBkgnd(var Message: TWmEraseBkgnd); message WM_ERASEBKGND;
    procedure WMNCHitTest(var Message: TWMNCHitTest); message WM_NCHITTEST;
//    procedure WMSetCursor(var Message: TWMSetCursor); message WM_SetCursor;
    procedure WMWindowPosChanged(var Message: TWMWindowPosChanged); message WM_WINDOWPOSCHANGED;
    procedure SetTriangleWindow(const Value: Boolean);
    procedure SetPosition(const Value: TSizeGripPosition);
  protected
    FInitFormSize: TPoint;
    FInitFormPos: TPoint;
    FMouseMousePos: TPoint;
    procedure MouseDown(Button: TMouseButton; Shift: TShiftState;X, Y: Integer); override;
    procedure MouseMove(Shift: TShiftState; X, Y: Integer); override;
    procedure MouseUp(Button: TMouseButton; Shift: TShiftState; X, Y: Integer); override;
    procedure Paint; override;
    function CheckInCorner: Boolean;
    function CheckGripActive: Boolean;
    function GetFormSize: TPoint;
    function GetSizableForm: TWinControl;
    procedure UpdateWindowRegion;
    procedure CreateWnd; override;
    procedure Resize; override;
  public
    constructor Create(AOwner: TComponent); override;
    property TriangleWindow: Boolean read FTriangleWindow write SetTriangleWindow default True;
    property GripActiveStatus: TGripActiveStatusEh read FGripActiveStatus write FGripActiveStatus;
    property Position: TSizeGripPosition read FPosition write SetPosition;
  end;

{ TGridDragWinEh }

  TGridDragWinEh = class(TWinControl)
  private
    FAlphaBlendValue: Byte;
    FTransparentColorValue: TColor;
  protected
    procedure CreateParams(var Params: TCreateParams); override;
    procedure CreateWnd; override;
    procedure SetLayeredAttribs;
  public
    constructor Create(AOwner: TComponent); override;
    function Visible: Boolean;
    procedure Show;
    procedure MoveToFor(Control: TControl; NewPos: TPoint); overload; virtual;
    procedure MoveToFor(Control: TControl; NewPos: TPoint; NewWidth, NewHeight: Integer); overload; virtual;
    procedure StartShow(Control: TControl; Pos: TPoint; Width, Height: Integer); overload; virtual;
    procedure StartShow(Control: TControl; Pos: TPoint; Height: Integer); overload; virtual;
    procedure TemporaryHide;

  end;

{ TGridDragBoxEh }

  TGridDragBoxEh = class(TGridDragWinEh)
  protected
    procedure CreateParams(var Params: TCreateParams); override;
  public
    constructor Create(AOwner: TComponent); override;
  end;

{ TGridMoveLineEh }

  TGridMoveLineEh = class(TGridDragWinEh)
  protected
    sHigh7: TShape;
    sHigh5: TShape;
    sHigh3: TShape;
    sLine: TShape;
    sLow3: TShape;
    sLow5: TShape;
    sLow7: TShape;

    hLeft7: TShape;
    hLeft5: TShape;
    hLeft3: TShape;
    hLine: TShape;
    hRight3: TShape;
    hRight5: TShape;
    hRight7: TShape;

    FIsVert: Boolean;
    procedure CreateParams(var Params: TCreateParams); override;
  public
    constructor Create(AOwner: TComponent); override;
    procedure StartShow(Control: TControl; Pos: TPoint; AIsVert: Boolean; Size: Integer; ACaptureControl: TObject); virtual;
    procedure MoveToFor(Control: TControl; NewPos: TPoint); override;
    procedure UpdateOrientationData;
    property IsVert: Boolean read FIsVert;
  end;

  function GetDragBoxEh: TGridDragWinEh;
  function GetMoveLineEh: TGridMoveLineEh;

implementation
