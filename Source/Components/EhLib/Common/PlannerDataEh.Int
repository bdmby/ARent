{*******************************************************}
{                                                       }
{                        EhLib v8.2                     }
{                                                       }
{                Planner Source Component               }
{                      Build 8.2.004                    }
{                                                       }
{   Copyright (c) 2014-2015 by Dmitry V. Bolshakov      }
{                                                       }
{*******************************************************}

{$I EhLib.Inc}

unit PlannerDataEh;

interface

uses
  Classes, Windows, Messages, Types, Graphics, Dialogs,
{$IFDEF EH_LIB_17} System.Generics.Collections, System.UITypes, {$ENDIF}
{$IFDEF CIL}
  EhLibVCLNET,
  WinUtils,
{$ELSE}
  {$IFDEF FPC}
  EhLibLCL,
  {$ELSE}
  EhLibVCL,
  {$ENDIF}
{$ENDIF}
  ToolCtrlsEh, DateUtils, DB, ImgList, TypInfo,
  SysUtils, Variants, GraphUtil;

type
  TPlannerDataSourceEh = class;
  TPlannerDataItemEh = class;
  TPlannerResourcesEh = class;
  TPlannerItemSourceParamsEh = class;
  TItemSourceFieldsMapEh = class;
  TItemSourceFieldsMapItemEh = class;

  TPlannerDataItemEhClass = class of TPlannerDataItemEh;

  TApplyUpdateToDataStorageEhEvent = procedure (PlannerDataSource: TPlannerDataSourceEh; PlanItem: TPlannerDataItemEh; UpdateStatus: TUpdateStatus) of object;
  TCheckLoadTimePlanRecordEhEvent = procedure (PlannerDataSource: TPlannerDataSourceEh; DataSet: TDataSet; var IsLoadRecord: Boolean) of object;

  TPrepareItemsReaderEhEvent = procedure (PlannerDataSource: TPlannerDataSourceEh;
    RequriedStartDate, RequriedFinishDate, LoadedBorderDate: TDateTime;
    var PreparedReadyStartDate, PreparedFinishDate: TDateTime) of object;
  TReadItemEhEvent = procedure (PlannerDataSource: TPlannerDataSourceEh; PlanItem: TPlannerDataItemEh; var Eof: Boolean) of object;

  TPlannerLoadDataForPeriodEhEvent =  procedure (PlannerDataSource: TPlannerDataSourceEh;
  StartDate, FinishDate, LoadedBorderDate: TDateTime; var LoadedStartDate, LoadedFinishDate: TDateTime) of object;

//  TGetPlannerDataItemClassEhEvent = procedure (PlannerDataSource: TPlannerDataSourceEh;
//    var PlannerDataItemClass: TPlannerDataItemEhClass) of object;


  TEditingStatusEh = (esBrowseEh, esEditEh, esInsertEh);

{ TPlannerResourceEh }

  TPlannerResourceEh = class(TCollectionItem)
  private
    FName: string;
    FImageIndex: TImageIndex;
    FColor: TColor;
    FResourceID: Variant;
    FFaceColor: TColor;
    FDarkLineColor: TColor;
    FBrightLineColor: TColor;

    procedure SetImageIndex(const Value: TImageIndex);
    procedure SetName(const Value: string);
    procedure SetColor(const Value: TColor);
    function GetCollection: TPlannerResourcesEh;
    procedure SetResourceID(const Value: Variant);
    function GetFaceColor: TColor;
    function GetDarkLineColor: TColor;
    function GetBrightLineColor: TColor;

  protected
    function GetDisplayName: string; override;
    procedure AssignTo(Dest: TPersistent); override;
    procedure SetDisplayName(const Value: string); override;

  public
    constructor Create(ACollection: TCollection); override;

    property FaceColor: TColor read GetFaceColor;
    property DarkLineColor: TColor read GetDarkLineColor;
    property BrightLineColor: TColor read GetBrightLineColor;

    property Collection: TPlannerResourcesEh read GetCollection;
  published
    property Color: TColor read FColor write SetColor default clNone;
    property Name: string read FName write SetName;
    property ImageIndex: TImageIndex read FImageIndex write SetImageIndex default -1;
    property ResourceID: Variant read FResourceID write SetResourceID;

  end;

{ TPlannerResourcesEh }

  TPlannerResourcesEh = class(TCollection)
  private
    FPlannerSource: TPlannerDataSourceEh;
    procedure SetItem(Index: Integer; Value: TPlannerResourceEh);
    function GetItem(Index: Integer): TPlannerResourceEh;

  protected
    function GetOwner: TPersistent; override;
    procedure Update(Item: TCollectionItem); override;

  public
    constructor Create(APlannerSource: TPlannerDataSourceEh);

    function Add: TPlannerResourceEh;
    function ResourceByResourceID(ResourceID: Variant): TPlannerResourceEh;

    property Items[Index: Integer]: TPlannerResourceEh read GetItem write SetItem; default;
  end;

{ TPlannerDataItemEh }

  TPlannerDataItemEh = class(TPersistent)
  private
    FTitle: string;
    FEndTime: TDateTime;
    FStartTime: TDateTime;
    FSource: TPlannerDataSourceEh;
    FAllDay: Boolean;
    FResourceID: Variant;
    FUpdateStatus: TUpdateStatus;
    FItemID: Variant;
    FResource: TPlannerResourceEh;
    FFillColor: TColor;
    FBody: String;
    FFrameColor: TColor;
    FChangesApplying: Boolean;
    FEditingStatus: TEditingStatusEh;

    function GetDuration: TDateTime;
    procedure SetEndTime(const Value: TDateTime);
    procedure SetStartTime(const Value: TDateTime);
    procedure SetTitle(const Value: string);
    procedure SetAllDay(const Value: Boolean);
    procedure SetResourceID(const Value: Variant);
    procedure SetItemID(const Value: Variant);
    procedure SetResource(const Value: TPlannerResourceEh);
    procedure SetFillColor(const Value: TColor);
    procedure SetBody(const Value: String);

  protected
    FUpdateCount: Integer;
//    function CreatePlanItemOldValues: TTimePlanItemOldValueEh; virtual;
    procedure Change; virtual;
    procedure UpdateRefResource; virtual;
    procedure StartApplyChanges; virtual;
    procedure FinishApplyChanges; virtual;
    procedure ResolvePlanItemUpdate; virtual;
    procedure BeginInsert; virtual;

  public
    constructor Create(ASource: TPlannerDataSourceEh); virtual;
    destructor Destroy; override;

    procedure BeginEdit; virtual;
    procedure EndEdit(PostChanges: Boolean); virtual;

    function GetFrameColor: TColor; virtual;

    function InsideDay: Boolean; virtual;
    function InsideDayRange: Boolean; virtual;
    procedure Assign(Source: TPersistent); override;
    procedure AssignProperties(Source: TPlannerDataItemEh); virtual;
    procedure MergeUpdates;
    procedure ApplyUpdates;

    property Duration: TDateTime read GetDuration;
    property Source: TPlannerDataSourceEh read FSource;
    property Resource: TPlannerResourceEh read FResource write SetResource;

    property UpdateCount: Integer read FUpdateCount;
    property UpdateStatus: TUpdateStatus read FUpdateStatus;
    property EditingStatus: TEditingStatusEh read FEditingStatus;

  published
    property Title: String read FTitle write SetTitle;
    property Body: String read FBody write SetBody;
    property StartTime: TDateTime read FStartTime write SetStartTime;
    property EndTime: TDateTime read FEndTime write SetEndTime;
    property AllDay: Boolean read FAllDay write SetAllDay;
    property ResourceID: Variant read FResourceID write SetResourceID;
    property ItemID: Variant read FItemID write SetItemID;
    property FillColor: TColor read FFillColor write SetFillColor;
  end;

//  TPlannerDataItemEhClass = class of TPlannerDataItemEh;

{
  ItemSourceParams
    DataSet: TDataSet
    DataDriver: TDataDriverEh
    FieldMap
      TitleFieldName: String;
      BodyFieldName: String;
      StartTimeFieldName: String;
      EndTimeFieldName: String;
      AllDayFieldName: String;
      ResourceIDFieldName: String;
      ItemIDFieldName: String;
      FillColorFieldName: String;

  OnMapItemFields(FieldMapArr = array of PropName, PropNum, FieldName, out FieldIndex)

  LoadTimeItems();

  ResourceSourceParams
    DataSet: TDataSet
    DataDriver: TDataDriverEh
    FieldMap
      ColorFieldName: String;
      NameFieldName: String;
      ImageIndexFieldName: String;
      ResourceIDFieldName: String;

  OnMapResourceFields(FieldMapArr = array of PropName, PropNum, FieldName, out FieldIndex)

  LoadResources();

  LoadData();
}

(*
  TFieldMapArrayItemEh = record
    PropName: String;
    PropNum: Integer;
    FieldName: String;
    FieldIndex: Integer;
  end;

  TFieldMapArrayEh = array of TFieldMapArrayItemEh;

{ TItemSourceFieldMapEh }

  TItemSourceFieldMapEh = class(TPersistent)
  private
    FResourceIDFieldName: String;
    FAllDayFieldName: String;
    FItemIDFieldName: String;
    FFillColorFieldName: String;
    FStartTimeFieldName: String;
    FBodyFieldName: String;
    FTitleFieldName: String;
    FEndTimeFieldName: String;
    FItemSourceParamsEh: TPlannerItemSourceParamsEh;
    procedure SetAllDayFieldName(const Value: String);
    procedure SetBodyFieldName(const Value: String);
    procedure SetEndTimeFieldName(const Value: String);
    procedure SetFillColorFieldName(const Value: String);
    procedure SetItemIDFieldName(const Value: String);
    procedure SetResourceIDFieldName(const Value: String);
    procedure SetStartTimeFieldName(const Value: String);
    procedure SetTitleFieldName(const Value: String);
  public
    constructor Create(AItemSourceParamsEh: TPlannerItemSourceParamsEh);
    destructor Destroy; override;

    property ItemSourceParamsEh: TPlannerItemSourceParamsEh read FItemSourceParamsEh;

  published
    property ItemIDFieldName: String read FItemIDFieldName write SetItemIDFieldName;
    property TitleFieldName: String read FTitleFieldName write SetTitleFieldName;
    property BodyFieldName: String read FBodyFieldName write SetBodyFieldName;
    property StartTimeFieldName: String read FStartTimeFieldName write SetStartTimeFieldName;
    property EndTimeFieldName: String read FEndTimeFieldName write SetEndTimeFieldName;
    property AllDayFieldName: String read FAllDayFieldName write SetAllDayFieldName;
    property ResourceIDFieldName: String read FResourceIDFieldName write SetResourceIDFieldName;
    property FillColorFieldName: String read FFillColorFieldName write SetFillColorFieldName;
  end;

*)

  TItemSourceReadValueEventEh = procedure(DataSource: TPlannerDataSourceEh;
    MapItem: TItemSourceFieldsMapItemEh; const DataItem: TPlannerDataItemEh;
    var Processed: Boolean) of object;

{ TItemSourceFieldsMapItemEh }

  TItemSourceFieldsMapItemEh = class(TCollectionItem)
  private
    FPropertyName: String;
    FField: TField;
    FDataSetFieldName: String;
    FPropInfo: PPropInfo;
    FOnReadValue: TItemSourceReadValueEventEh;
    function GetCollection: TItemSourceFieldsMapEh;

  public
    constructor Create(Collection: TCollection); override;
    procedure Assign(Source: TPersistent); override;
    procedure DefaulReadValue(const DataItem: TPlannerDataItemEh); virtual;
    procedure ReadValue(const DataItem: TPlannerDataItemEh); virtual;

    property Field: TField read FField write FField;
    property PropInfo: PPropInfo read FPropInfo write FPropInfo;
    property Collection: TItemSourceFieldsMapEh read GetCollection;
  published
    property DataSetFieldName: String read FDataSetFieldName write FDataSetFieldName;
    property PropertyName: String read FPropertyName write FPropertyName;

    property OnReadValue: TItemSourceReadValueEventEh read FOnReadValue write FOnReadValue;
  end;

{ TItemSourceFieldsMapEh }

  TItemSourceFieldsMapEh = class(TCollection, IDefaultItemsCollectionEh)
  private
    FItemSourceParamsEh: TPlannerItemSourceParamsEh;
    function GetItem(Index: Integer): TItemSourceFieldsMapItemEh;
    procedure SetItem(Index: Integer; const Value: TItemSourceFieldsMapItemEh);
    function GetSourceParams: TPlannerItemSourceParamsEh;

  protected
    {IInterface}
  {$IFDEF FPC}
    function QueryInterface(constref IID: TGUID; out Obj): HResult; virtual; stdcall;
  {$ELSE}
    function QueryInterface(const IID: TGUID; out Obj): HResult; virtual; stdcall;
  {$ENDIF}
    function _AddRef: Integer; stdcall;
    function _Release: Integer; stdcall;

    {IDefaultItemsCollectionEh}
    function CanAddDefaultItems: Boolean;
    procedure AddAllItems(DeleteExisting: Boolean);

  protected
    function GetOwner: TPersistent; override;

  public
    constructor Create(AItemSourceParamsEh: TPlannerItemSourceParamsEh; ItemClass: TCollectionItemClass);
    destructor Destroy; override;

    function Add: TItemSourceFieldsMapItemEh;

    procedure ReadDataRecordValues(DataItem: TPlannerDataItemEh);
    procedure InitItems;

    procedure BuildItems(const DataItemClass: TPlannerDataItemEhClass); virtual;
    property Item[Index: Integer]: TItemSourceFieldsMapItemEh read GetItem write SetItem; default;
    property SourceParams: TPlannerItemSourceParamsEh read GetSourceParams;
  end;

{ TPlannerItemSourceParamsEh }

  TPlannerItemSourceParamsEh = class(TPersistent)
  private
    FDataSet: TDataSet;
    FPlannerDataSource: TPlannerDataSourceEh;
    FFieldsMap: TItemSourceFieldsMapEh;
    procedure SetDataSet(const Value: TDataSet);
    procedure SetFieldMap(const Value: TItemSourceFieldsMapEh);
  protected
    function GetOwner: TPersistent; override;

  public
    constructor Create(APlannerDataSource: TPlannerDataSourceEh);
    destructor Destroy; override;

    property PlannerDataSource: TPlannerDataSourceEh read FPlannerDataSource;
  published
    property DataSet: TDataSet read FDataSet write SetDataSet;
//    property DataDriver: TDataDriverEh
    property FieldsMap: TItemSourceFieldsMapEh read FFieldsMap write SetFieldMap;
  end;

{ TPlannerDataSourceEh }

  TPlannerDataSourceEh = class(TComponent)
  private
    FChanged: Boolean;
    FItems: TList;
    FTimePlanItemClass: TPlannerDataItemEhClass;
    FUpdateCount: Integer;
    FNotificationConsumers: TInterfaceList;
    FResources: TPlannerResourcesEh;
    FOnApplyUpdateToDataStorage: TApplyUpdateToDataStorageEhEvent;
    FOnCheckLoadTimePlanRecord: TCheckLoadTimePlanRecordEhEvent;
    FItemSourceParams: TPlannerItemSourceParamsEh;
    FLoadedFinishDate: TDateTime;
    FLoadedStartDate: TDateTime;
    FOnPrepareItemsReader: TPrepareItemsReaderEhEvent;
    FOnPrepareReadItem: TReadItemEhEvent;
    FAllItemsLoaded: Boolean;
    FOnLoadDataForPeriod: TPlannerLoadDataForPeriodEhEvent;
//    FOnGetPlannerDataItemClass: TGetPlannerDataItemClassEhEvent;

    function GetCount: Integer;
    function GetItems(Index: Integer): TPlannerDataItemEh;
    function GetResources: TPlannerResourcesEh;
    procedure SetResources(const Value: TPlannerResourcesEh);
    procedure SetItemSourceParams(const Value: TPlannerItemSourceParamsEh);
    procedure SetAllItemsLoaded(const Value: Boolean);
    procedure SetLoadedFinishDateC(const Value: TDateTime);
    procedure SetLoadedStartDate(const Value: TDateTime);

  protected
//    FFieldMapArray: TFieldMapArrayEh;

    function IsLoadTimePlanRecord(ADataSet: TDataSet): Boolean; virtual;

    procedure Sort;
    procedure PlanChanged; virtual;
    procedure ResourcesChanged; virtual;
    procedure UpdateRecourdesByRecourdeID; virtual;
    procedure PlanItemChanged(PlanItem: TPlannerDataItemEh); virtual;
    procedure ResolvePlanItemUpdate(PlanItem: TPlannerDataItemEh; UpdateStatus: TUpdateStatus); virtual;
    procedure ResolvePlanItemUpdateToDataStorage(PlanItem: TPlannerDataItemEh; UpdateStatus: TUpdateStatus);
    procedure FreeItem(Item: TPlannerDataItemEh);
//    procedure ExtendLoadedRange(NewStartDate, NewFinishDate: TDateTime); virtual;
    procedure LoadDataForPeriod(StartDate, FinishDate, LoadedBorderDate: TDateTime; var LoadedStartDate, LoadedFinishDate: TDateTime); virtual;
    procedure PrepareItemsReader(StartDate, FinishDate, LoadedBorderDate: TDateTime; var ALoadedStartDate, ALoadedFinishDate: TDateTime); virtual;
    procedure ReadItem(PlanItem: TPlannerDataItemEh; var Eof: Boolean); virtual;

    procedure Notification(AComponent: TComponent; Operation: TOperation); override;

  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    procedure RegisterChanges(Value: ISimpleChangeNotificationEh);
    procedure UnRegisterChanges(Value: ISimpleChangeNotificationEh);

    function CreatePlannerItem: TPlannerDataItemEh; virtual;
    function CreateTmpPlannerItem: TPlannerDataItemEh; virtual;
    function NewItem(ATimePlanItemClass: TPlannerDataItemEhClass = nil; IsDummy: Boolean = False): TPlannerDataItemEh;
    function IndexOf(Item: TPlannerDataItemEh): Integer;

    procedure BeginUpdate;
    procedure EndUpdate;
    procedure DeleteItem(Item: TPlannerDataItemEh);
    procedure DeleteItemAt(Index: Integer);
    procedure DeleteItemNoApplyUpdates(Item: TPlannerDataItemEh);
    procedure AddItem(Item: TPlannerDataItemEh);
    procedure FetchTimePlanItem(Item: TPlannerDataItemEh);
    procedure RequestItems(StartTime, EndTime: TDateTime);
    procedure ClearItems;
//    procedure FillFieldMapArr(var AFieldMapArray: TFieldMapArrayEh);
    procedure LoadTimeItems; virtual;
    procedure EnsureDataForPeriod(AStartDate, AEndDate: TDateTime); virtual;
    procedure DefaultPrepareItemsReader(RequriedStartDate, RequriedFinishDate, LoadedBorderDate: TDateTime; var PreparedReadyStartDate, PreparedFinishDate: TDateTime); virtual;
    procedure DefaultReadItem(PlanItem: TPlannerDataItemEh; var Eof: Boolean); virtual;

    procedure StopAutoLoad;
    procedure ResetAutoLoadProcess;

    property Items[Index: Integer]: TPlannerDataItemEh read GetItems; default;
    property Count: Integer read GetCount;
    property Resources: TPlannerResourcesEh read GetResources write SetResources;
    property LoadedStartDate: TDateTime read FLoadedStartDate write SetLoadedStartDate;
    property LoadedFinishDate: TDateTime read FLoadedFinishDate write SetLoadedFinishDateC;
    property AllItemsLoaded: Boolean read FAllItemsLoaded write SetAllItemsLoaded;
    property TimePlanItemClass: TPlannerDataItemEhClass read FTimePlanItemClass write FTimePlanItemClass;

  published
    property ItemSourceParams: TPlannerItemSourceParamsEh read FItemSourceParams write SetItemSourceParams;

    property OnApplyUpdateToDataStorage: TApplyUpdateToDataStorageEhEvent read FOnApplyUpdateToDataStorage write FOnApplyUpdateToDataStorage;
    property OnCheckLoadTimePlanRecord: TCheckLoadTimePlanRecordEhEvent read FOnCheckLoadTimePlanRecord write FOnCheckLoadTimePlanRecord;
    property OnPrepareItemsReader: TPrepareItemsReaderEhEvent read FOnPrepareItemsReader write FOnPrepareItemsReader;
    property OnLoadDataForPeriod: TPlannerLoadDataForPeriodEhEvent read FOnLoadDataForPeriod write FOnLoadDataForPeriod;
    property OnReadItem: TReadItemEhEvent read FOnPrepareReadItem write FOnPrepareReadItem;
//    property OnGetPlannerDataItemClass: TGetPlannerDataItemClassEhEvent read FOnGetPlannerDataItemClass write FOnGetPlannerDataItemClass;
  end;

{ TWorkingTimeCalendarEh }

  TDayTypeEh = (dtWorkdayEh, dtFreedayEh, dtPublicHolidayEh);

  TTimeRangeEh = record
    StartTime: TDateTime;
    FinishTime: TDateTime;
  end;

  TTimeRangesEh = array of TTimeRangeEh;

  TWorkingTimeCalendarEh = class(TComponent)
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    function IsWorkday(ADate: TDateTime): Boolean; virtual;
    procedure GetWorkingTime(ADate: TDateTime; var ATimeRanges: TTimeRangesEh); virtual;
  end;

  function GlobalWorkingTimeCalendar: TWorkingTimeCalendarEh;
  function RegisterGlobalWorkingTimeCalendar(NewWorkingTimeCalendar: TWorkingTimeCalendarEh): TWorkingTimeCalendarEh;

implementation
