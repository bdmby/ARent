{*******************************************************}
{                                                       }
{                     EhLib v8.2                        }
{                                                       }
{          TDBXDataDriverEh component (Build 8.2.01)    }
{                                                       }
{      Copyright (c) 2003,12 by Dmitry V. Bolshakov     }
{                                                       }
{*******************************************************}

unit DBXDataDriverEh;

{$I EHLIB.INC}

interface

uses Windows, SysUtils, Classes, Controls, DB,
{$IFDEF EH_LIB_6} Variants, SqlExpr, {$ENDIF}
{$IFDEF EH_LIB_5} Contnrs, {$ENDIF}
  ToolCtrlsEh, DBCommon, MemTableDataEh, DataDriverEh;
type

  TDBXDataDriverEh = class;
  TDBXConnectionProviderEh = class;

{ TDBXCommandEh }

  TDBXCommandEh = class(TBaseSQLCommandEh)
  private
    function GetDataDriver: TDBXDataDriverEh;
  public
    function Execute(var Cursor: TDataSet; var FreeOnEof: Boolean): Integer; override;
    property DataDriver: TDBXDataDriverEh read GetDataDriver;
  published
    property Params;
    property ParamCheck;
    property CommandText;
    property CommandType;
  end;

{ TDBXDataDriverEh }

  TDBXDataDriverEh = class(TBaseSQLDataDriverEh)
  private
    FConnectionProvider: TDBXConnectionProviderEh;
    FServerSpecOperations: TServerSpecOperationsEh;
    FSQLConnection: TSQLConnection;
    procedure SetConnection(const Value: TSQLConnection);
    procedure SetConnectionProvider(const Value: TDBXConnectionProviderEh);
  protected
    function CreateCommand: TCustomSQLCommandEh; override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure SetAutoIncFields(Fields: TFields; DataStruct: TMTDataStructEh); override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    function InternalGetServerSpecOperations: TServerSpecOperationsEh; override;
    function CreateDesignCopy: TCustomSQLDataDriverEh; override;
    function GetConnectionProvider: IConnectionProviderEh; override;
    function HaveDataConnection(): Boolean; override;
    procedure GetBackUpdatedValues(MemRec: TMemoryRecordEh; Command: TCustomSQLCommandEh; ResDataSet: TDataSet); override;
    procedure DoServerSpecOperations(MemRec: TMemoryRecordEh; Command: TCustomSQLCommandEh; ResDataSet: TDataSet); virtual;
  published
    property ConnectionProvider: TDBXConnectionProviderEh read FConnectionProvider write SetConnectionProvider;
    property MacroVars;
    property SQLConnection: TSQLConnection read FSQLConnection write SetConnection;
    property SelectCommand;
    property SelectSQL;
    property UpdateCommand;
    property UpdateSQL;
    property InsertCommand;
    property InsertSQL;
    property DeleteCommand;
    property DeleteSQL;
    property GetrecCommand;
    property GetrecSQL;
    property DynaSQLParams;
    property ProviderDataSet;
    property KeyFields;
    property SpecParams;

    property OnExecuteCommand;
    property OnBuildDataStruct;
    property OnGetBackUpdatedValues;
    property OnProduceDataReader;
    property OnAssignFieldValue;
    property OnReadRecord;
    property OnRefreshRecord;
    property OnUpdateRecord;
    property OnAssignCommandParam;
    property OnUpdateError;
  end;

{ TDBXDesignConnectionEh }

(*
  TDBXDesignConnectionEh = class(TCustomDesignConnectionEh)
  private
    FConnectionProvider: TDBXConnectionProviderEh;
    FConnection: TSQLConnection;
    function GetConnectionName: string;
    function GetDriverName: string;
    function GetGetDriverFunc: string;
    function GetLibraryName: string;
    function GetLoadParamsOnConnect: Boolean;
    function GetParams: TStrings;
    function GetVendorLib: string;
    procedure SetConnectionName(const Value: string);
    procedure SetDriverName(const Value: string);
    procedure SetGetDriverFunc(const Value: string);
    procedure SetLibraryName(const Value: string);
    procedure SetLoadParamsOnConnect(const Value: Boolean);
    procedure SetParams(const Value: TStrings);
    procedure SetVendorLib(const Value: string);
  protected
    function GetConnected: Boolean; override;
    procedure BeforeDesignConnection(Sender: TObject);
    procedure SetDesignConnected(const Value: Boolean); override;
  public
    constructor Create(AConnectionProvider: TDBXConnectionProviderEh);
    destructor Destroy; override;
    procedure Assign(Source: TPersistent); override;
    property ConnectionProvider: TDBXConnectionProviderEh read FConnectionProvider;
    property Connection: TSQLConnection read FConnection;
  published
    property Connected;

    property ConnectionName: string read GetConnectionName write SetConnectionName;
    property DriverName: string read GetDriverName write SetDriverName;
    property GetDriverFunc: string read GetGetDriverFunc write SetGetDriverFunc;
//    property KeepConnection: Boolean read FKeepConnection write SetKeepConnection default True;
    property LibraryName: string read GetLibraryName write SetLibraryName;
    property LoadParamsOnConnect: Boolean read GetLoadParamsOnConnect write SetLoadParamsOnConnect default False;
//    property LoginPrompt default True;
    property Params: TStrings read GetParams write SetParams;
//    property TableScope: TTableScopes read FTableScope write FTableScope default [tsTable, tsView];
    property VendorLib: string read GetVendorLib write SetVendorLib;
//    property ValidatePeerCertificate: TValidateCertificate read FValidateCertificate write FValidateCertificate;

    property UseDesignConnection;
  end;
*)

  TDBXInlineConnectionEh = class(TSQLConnection)
  private
    FUseAtDesignTime: Boolean;
    FUseAtRunTime: Boolean;
    function GetConnectionProvider: TDBXConnectionProviderEh;
    function GetUseAtRunTime: Boolean;
    procedure SetUseAtRunTime(const Value: Boolean);
  protected
    procedure SetConnected(Value: Boolean); override;
    procedure BeforeInlineConnection(Sender: TObject);
    procedure AfterInlineConnection(Sender: TObject);
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    property ConnectionProvider: TDBXConnectionProviderEh read GetConnectionProvider;
  published
    property UseAtDesignTime: Boolean read FUseAtDesignTime write FUseAtDesignTime default False;
    property UseAtRunTime: Boolean read GetUseAtRunTime write SetUseAtRunTime default False;
  end;


{ TDBXConnectionProviderEh }

  TDBXConnectionProviderEh = class(TConnectionProviderEh)
  private
    FSQLConnection: TSQLConnection;
    FDesignConnection: TDBXInlineConnectionEh;
    FInlineConnectionBeforeConnect: TNotifyEvent;
    FInlineConnectionAfterConnect: TNotifyEvent;
    procedure SetConnection(const Value: TSQLConnection);
    procedure SetDesignConnection(const Value: TDBXInlineConnectionEh);
  protected
    FDesignDataBase: TComponent;
    procedure Loaded; override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
  public
    {DesignTime stuff}
    function GetDesignDataBase: TComponent; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    function DefaultExecuteCommand(SQLDataDriver: TCustomSQLDataDriverEh; Command: TCustomSQLCommandEh; var Cursor: TDataSet; var FreeOnEof: Boolean; var Processed: Boolean): Integer; override;
    function UseAtDesignTime: Boolean;
    function CurrentTimeConnection: TSQLConnection;
  published
    property SQLConnection: TSQLConnection read FSQLConnection write SetConnection;
    property InlineConnection: TDBXInlineConnectionEh read FDesignConnection write SetDesignConnection;
    property ServerType;

    property OnExecuteCommand;
    property OnGetBackUpdatedValues;
    property OnGetServerSpecOperations;
    property OnUpdateRecord;

    property InlineConnectionBeforeConnect: TNotifyEvent read FInlineConnectionBeforeConnect write FInlineConnectionBeforeConnect;
    property InlineConnectionAfterConnect: TNotifyEvent read FInlineConnectionAfterConnect write FInlineConnectionAfterConnect;
  end;

function DefaultExecuteDBXCommandEh(SQLDataDriver: TCustomSQLDataDriverEh;
    Command: TCustomSQLCommandEh; var Cursor: TDataSet; var FreeOnEof: Boolean;
    var Processed: Boolean; ASQLConnection: TSQLConnection): Integer;

var
  DBXConnectionProviderDesignService: IConnectionProviderDesignServiceEh;

implementation
