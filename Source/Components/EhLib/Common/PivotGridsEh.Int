{*******************************************************}
{                                                       }
{                        EhLib v8.2                     }
{                                                       }
{                      PivotGridsEh                     }
{                      Build 8.2.015                    }
{                                                       }
{   Copyright (c) 2014-2015 by Dmitry V. Bolshakov      }
{                                                       }
{*******************************************************}

{$I EhLib.Inc}

unit PivotGridsEh;

interface

uses
{$IFDEF EH_LIB_17} System.Generics.Collections, {$ENDIF}
  Windows, SysUtils, Messages, Classes, Controls, Forms, StdCtrls, Dialogs,
{$IFDEF EH_LIB_5} Contnrs, {$ENDIF}
{$IFDEF EH_LIB_6} Variants, Types, {$ENDIF}
{$IFDEF EH_LIB_7} Themes, UxTheme, {$ENDIF}
{$IFDEF EH_LIB_17} System.UITypes, {$ENDIF}
{$IFDEF CIL}
  EhLibVCLNET,
  WinUtils,
{$ELSE}
  {$IFDEF FPC}
  EhLibLCL, DBGridsEh, LMessages, LCLType, Win32Extra,
  {$ELSE}
  EhLibVCL, DBGridEh, PrintUtilsEh,
  {$ENDIF}
{$ENDIF}
  MemTableEh, MemTableDataEh, MemTreeEh, TypInfo, DateUtils,
  GridsEh, GridToolCtrlsEh, DBCtrlsEh, ToolCtrlsEh,
  DBAxisGridsEh, DBUtilsEh, FilterDropDownFormsEh,
  DBCtrls, Db, Menus, Registry, Graphics, IniFiles, ImgList, StdActns,
  ActnList, ExtCtrls, DynVarsEh, ToolWin, Comctrls, CommCtrl;

type
  TCustomPivotGridEh = class;
  TPivotFieldsEh = class;
  TPivotFieldEh = class;
  TValueFieldsCollectionEh = class;
  TPivotDataSourceEh = class;
  TPivotGridScrollBarPanelControl = class;
  TPivotAxisTreeNodeEh = class;
  TPivotProgressIndicatorPanelEh = class;

  TFieldDateTimeSliceLevelEh = (dtslNonEh, dtslYearEh, dtslQuarterEh, dtslMonthEh, dtslWeekEh,
    dtslDayEh, dtslHourEh, dtslMinEh, dtslSecEh, dtslMSecEh);

//  TDateTimeSliceLevelEh = dtslYearEh..dtslMSecEh;

  TDateTimeSliceLevelsEh = set of TFieldDateTimeSliceLevelEh;

  TPivotValueTypeEh = (svtNonEh, svtSumEh, svtCountEh, svtAvgEh,
    svtMaxEh, svtMinEh, svtCountDistinctEh, svtCustomEh);

  TPivotCelTypeEh = (sctEmptyEh, sctFieldNameForRowEh, sctFieldNameForColEh,
    sctAxisValueEh, sctDataEh, sctHorzAggregateData, sctVertAggregateData,
    sctValuesColCaptionEh);

  TPivotFieldFetchValueEventEh = procedure(DataSource: TPivotDataSourceEh;
    PivotField: TPivotFieldEh; var Value: Variant; var Processed: Boolean) of object;

  IPivotDataSourceNotificationEh = interface
    ['{79ED2D2A-D1EC-4095-80CC-12F6D4D31BC7}']
    function PivotDataChangeProgress(Sender: TObject; ElapsedTime: LongWord; Percent: Integer): Boolean;

    procedure PivotFieldsChanged(Sender: TObject);
    procedure PivotStructureChanged(Sender: TObject);
    procedure PivotDataChanged(Sender: TObject);

    procedure PivotDataStartChanging(Sender: TObject);
    procedure PivotDataChangingCanceled(Sender: TObject);
    procedure PivotDataFinishChanging(Sender: TObject);
  end;

{ TAggrValueHolderEh }

  TAggrValueHolderEh = class(TPersistent)
  private
    FAggrFunc: TPivotValueTypeEh;
  public
    Value: Variant;
    SrvVars: TVariantDynArray;
    SrvObj: TObject;

    destructor Destroy; override;

    procedure ResetAggrHolder;
    procedure AggrValue(const AValue: Variant);
    function FinalizeAggregation: Variant;

    property AggrFunc: TPivotValueTypeEh read FAggrFunc write FAggrFunc;
  end;


  TPivotRectCellEh = record
    Rect: TRect;
    PivotArrayCol: Integer;
    PivotArrayRow: Integer;
  end;

  TPivotRectCellDynArrayEh = array of TPivotRectCellEh;

{ TPivotCellEh }

  TPivotCellEh = class(TPersistent)
  private
    FCelType: TPivotCelTypeEh;
  public
    Value: Variant;
    ArrayValue: TVariantDynArray;
    DrawDownLine: Boolean;
    DrawRightLine: Boolean;
    HorzAggrLevelCol: Integer;
    HorzAggrLevelRow: Integer;
    VertAggrLevelCol: Integer;
    VertAggrLevelRow: Integer;
    RowVisible: Boolean;
    ColVisible: Boolean;
    Expanded: Boolean;
    ShowValue: Boolean;
    ShowGroupingSign: Boolean;
    DrawFilterButton: Boolean;
    PivotField: TPivotFieldEh;
    MasterCol: Integer;
    MasterRow: Integer;

    RowsTreeNode: TPivotAxisTreeNodeEh;
    VisRowsGroupFlatNodePos: Integer;

    ColsTreeNode: TPivotAxisTreeNodeEh;
    VisColsGroupFlatNodePos: Integer;

    procedure Clear;
  published
    property CelType: TPivotCelTypeEh read FCelType write FCelType;
  end;

  TPivotArrayItem = record
    PivotValue: Variant;
    AggrValue: Variant;
  end;

  TPivotGridArray = array of array of TPivotCellEh;

  TPivotArray = array of TPivotArrayItem;

{ TPivotFieldDataTypeDefEh }

  TPivotFieldDataTypeDefEh = class(TPersistent)
  private
    FPrecision: Integer;
    FDataType: TFieldType;
    FSize: Integer;
    procedure SetDataType(const Value: TFieldType);
    procedure SetPrecision(const Value: Integer);
    procedure SetSize(const Value: Integer);
  published
    property DataType: TFieldType read FDataType write SetDataType default ftUnknown;
    property Precision: Integer read FPrecision write SetPrecision default 0;
    property Size: Integer read FSize write SetSize default 0;
  end;

{ TPivotFieldEh }

  TPivotFieldEh = class(TCollectionItem)
  private
    FDisplayFormat: String;
    FDisplayName: String;
    FExpression: TSTFilterExpressionEh;
    FExpressionStr: String;
    FFieldName: String;
    FFieldValueList: IMemTableDataFieldValueListEh;
//    FLookupDisplayFieldName: String;
//    FLookupKeyFieldName: String;
//    FLookupList: TDataSet;
    FOnFetchValue: TPivotFieldFetchValueEventEh;
    FSliceLevel: TFieldDateTimeSliceLevelEh;
    FSortOrder: TSortOrderEh;
    FSourceFieldName: String;
    FSumFunction: TPivotValueTypeEh;
    FTypeDef: TPivotFieldDataTypeDefEh;

    function GetExpression: TSTFilterExpressionEh;
    function GetPivotFields: TPivotFieldsEh;
    function IsDisplayNameStored: Boolean;
    procedure SetDisplayFormat(const Value: String);
    procedure SetDisplayName(const Value: String); reintroduce;
    procedure SetExpression(const Value: TSTFilterExpressionEh);
    procedure SetFieldName(const Value: String);
    procedure SetSortOrder(const Value: TSortOrderEh);
    procedure SetSumFunction(const Value: TPivotValueTypeEh);
    procedure SetTypeDef(const Value: TPivotFieldDataTypeDefEh);
  protected
    FListValuesCheckingState: TBooleanDynArray;
    FPopupListboxDownIndex: Integer;

    function ParseExpression(const Exp: String): String;
    function GetDisplayName: string; override;

    procedure InternalSetExpressionStr(const Value: String); virtual;
    property FieldValueList: IMemTableDataFieldValueListEh read FFieldValueList write FFieldValueList;

  public
    constructor Create(Collection: TCollection); override;
    destructor Destroy; override;

    function GetValueForSource(SourceDataSet: TDataSet; Field: TField): Variant;
    function ProposedSumFunction: TPivotValueTypeEh;
    function ValueAsDispayText(const Value: Variant): String;

    procedure FillFilterValues(Items: TStrings);
    procedure SetNextSortOrder;
    procedure UpdateFilterFromValuesCheckingState(ss: TStrings; CheckStates: TBooleanDynArray);
    procedure UpdateValuesCheckingStateFromFilter(ss: TStrings; CheckStates: TBooleanDynArray);

    property Expression: TSTFilterExpressionEh read GetExpression write SetExpression;
    property PivotFields: TPivotFieldsEh read GetPivotFields;
    property SortOrder: TSortOrderEh read FSortOrder write SetSortOrder;


  published
    property DisplayFormat: String read FDisplayFormat write SetDisplayFormat;
    property DisplayName: String read GetDisplayName write SetDisplayName stored IsDisplayNameStored;
    property FieldName: String read FFieldName write SetFieldName;
    property SliceLevel: TFieldDateTimeSliceLevelEh read FSliceLevel write FSliceLevel default dtslNonEh;
    property SourceFieldName: String read FSourceFieldName write FSourceFieldName;
    property SumFunction: TPivotValueTypeEh read FSumFunction write SetSumFunction default svtNonEh;
    property TypeDef: TPivotFieldDataTypeDefEh read FTypeDef write SetTypeDef;

    property OnFetchValue: TPivotFieldFetchValueEventEh read FOnFetchValue write FOnFetchValue;
  end;

  TPivotFieldEhClass = class of TPivotFieldEh;

{ TPivotFieldsEh }

  TPivotFieldsEh = class(TCollection)
  private
    FPDSource: TPivotDataSourceEh;
    function GetPivotField(Index: Integer): TPivotFieldEh;
    procedure SetPivotField(Index: Integer; Value: TPivotFieldEh);

  protected
    function GetOwner: TPersistent; override;
    procedure Notify(Item: TCollectionItem; Action: TCollectionNotification); override;
    procedure Update(Item: TCollectionItem); override;

  public
    constructor Create(APDSource: TPivotDataSourceEh; AClass: TPivotFieldEhClass);

    function Add: TPivotFieldEh;
    function FindFieldByName(const PivotFieldName: String): TPivotFieldEh;
    function IndexOf(APivotField: TPivotFieldEh): Integer;
    procedure AddAllPivotFields(DeleteExistend: Boolean);
    procedure Assign(Source: TPersistent); override;
    procedure RebuildPivotFields;

    property PDSource: TPivotDataSourceEh read FPDSource;
    property Items[Index: Integer]: TPivotFieldEh read GetPivotField write SetPivotField; default;
  end;

{ TPivotFieldValueInfoEh }

  TPivotFieldValueInfoEh = class(TCollectionItem)
  private
    FDisplayFormat: String;
    FPivotField: TPivotFieldEh;
    FPivotFieldName: String;
    FSumFunction: TPivotValueTypeEh;

    function GetCollection: TValueFieldsCollectionEh;
    procedure SetDisplayFormat(const Value: String);
    procedure SetPivotField(const Value: TPivotFieldEh);
    procedure SetPivotFieldName(const Value: String);
    procedure SetSumFunction(const Value: TPivotValueTypeEh);

  protected
    function UpdatePivotFieldFromPivotFieldName: TPivotFieldEh;

  public
    constructor Create(Collection: TCollection); override;
    destructor Destroy; override;

    procedure Assign(Source: TPersistent); override;

    property Collection: TValueFieldsCollectionEh read GetCollection;
    property DisplayFormat: String read FDisplayFormat write SetDisplayFormat;
    property PivotField: TPivotFieldEh read FPivotField write SetPivotField;
    property PivotFieldName: String read FPivotFieldName write SetPivotFieldName;
    property SumFunction: TPivotValueTypeEh read FSumFunction write SetSumFunction;
  end;

  TPivotFieldValueInfoEhClass = class of TPivotFieldValueInfoEh;

{ TValuePivotFieldsCollectionEh }

  TCollectionChangeEventEh = procedure(Sender: TCollection;
    Item: TCollectionItem; Action: TCollectionNotification) of object;

  TValueFieldsCollectionEh = class(TCollection)
  private
    FOnChangeNotification: TCollectionChangeEventEh;

    function GetPivotFieldValueInfo(Index: Integer): TPivotFieldValueInfoEh;
    procedure SetPivotFieldValueInfo(Index: Integer; Value: TPivotFieldValueInfoEh);
  protected
    FPivotDataSource: TPivotDataSourceEh;

    procedure Notify(Item: TCollectionItem; Action: TCollectionNotification); override;
    procedure Update(Item: TCollectionItem); override;
  public
    constructor Create(AClass: TPivotFieldValueInfoEhClass);

    function Add: TPivotFieldValueInfoEh;
    function AddForPivotField(APivotField: TPivotFieldEh; Position: Integer): TPivotFieldValueInfoEh;
    function IndexOf(PivotFieldValueInfo: TPivotFieldValueInfoEh): Integer;
    function IndexByPivotFieldName(const PivotFieldName: String): Integer;
    function DataLines: Integer;

    procedure Move(CurIndex, NewIndex: Integer);
    procedure UpdatePivotFieldsFromPivotFieldNames;

    property Items[Index: Integer]: TPivotFieldValueInfoEh read GetPivotFieldValueInfo write SetPivotFieldValueInfo; default;
    property PivotDataSource: TPivotDataSourceEh read FPivotDataSource;

    property OnChangeNotification: TCollectionChangeEventEh read FOnChangeNotification write FOnChangeNotification;
  end;

{ TPivotMemTableEh }

  TPivotMemTableEh = class(TMemTableEh)
  private
    FOnCallBackProgress: TNotifyEvent;
  protected
    function CreateMemTableData: TMemTableDataEh; override;
  public
    procedure MTCallBackProgress(Sender: TObject);
    property OnCallBackProgress: TNotifyEvent read FOnCallBackProgress write FOnCallBackProgress;
  end;

{ TPivotMemTableDataEh }

  TPivotMemTableDataEh = class(TMemTableDataEh)
  private
    FCallBackProgress: TNotifyEvent;
  protected
    function CreateRecordsList: TRecordsListEh; override;
    procedure CallBackProgress;
  public
    property OnCallBackProgress: TNotifyEvent read FCallBackProgress write FCallBackProgress;
  end;

  {TPivotRecordsListEh}

  TPivotRecordsListEh = class(TRecordsListEh)
  public
    procedure QuickSort(L, R: Integer; Compare: TCompareRecords; ParamSort: TObject); override;
    procedure CallBackProgress;
  end;

{ TPivotDataSourceEh }

  TLogTimeMetricEventEh = procedure(Sender: TObject; MetricName: String; Duration: LongWord) of object;

  TPivotDataSourceEh = class(TComponent)
  private
    FDataSet: TDataSet;
    FDefaultDateTimeSliceLevels: TDateTimeSliceLevelsEh;
    FInternalDefinitionUpdating: Boolean;
    FNotificationConsumers: TInterfaceList;
    FOnLogTimeMetric: TLogTimeMetricEventEh;
    FPivotFields: TPivotFieldsEh;
    FUpdateCount: Integer;

    procedure CreateSourceTableStruct;
    procedure FillSourceTable;
    procedure SetColumnFields(const Value: TStringList);
    procedure SetPivotFields(const Value: TPivotFieldsEh);
    procedure SetRowFields(const Value: TStringList);
    procedure SetValueFieldsInfo(const Value: TValueFieldsCollectionEh);
    procedure UpdateColRowValueFields;

  protected
    BaseTable: TMemTableEh;
    ColsFieldNames: String;
    ColsTable: TMemTableEh;
    FActualColFlds: TStringList;
    FActualRowFlds: TStringList;
    FActualValueFields: TValueFieldsCollectionEh;
    FColumnFields: TStringList;
    FRowFields: TStringList;
    FSourceTable: TMemTableEh;
    FValueFieldsInfo: TValueFieldsCollectionEh;
    ResultAggrTable: TMemTableEh;
    RowsFieldNames: String;
    RowsTable: TMemTableEh;
    TransResultAggrTable: TMemTableEh;
    FBuildDataProgressTicks: LongWord;
    FCheckCancelRequestTime: LongWord;
    FPercent: Integer;

    function PivotDataChangeProgress(ElapsedTime: LongWord; Percent: Integer): Boolean;

    procedure AggregateBasePivotData;
    procedure BuildGridData;
    procedure BuildGridDataForBaseTable;
    procedure CreateAndFillBaseTable;
    procedure CreateBaseTableStruct;
    procedure FillBasePivotData;
    procedure FillInverseGaussMatrixForLevel(ColsLevel: Integer);
    procedure LogTimeMetric(const MetricName: String; Duration: LongWord);
    procedure MakeColsRowsTables;
    procedure MakeColsTable;
    procedure MakeInverseGaussMatrix;
    procedure MakeResultAggrTable;
    procedure MakeRowsTable;
    procedure CallBackProgress(Sender: TObject);

    procedure ClearSourceData; virtual;
    procedure PivotDataChanged; virtual;
    procedure PivotDataStartChanging; virtual;
    procedure PivotDataFinishChanging; virtual;
    procedure PivotDataChangingCanceled; virtual;

    procedure PivotDataSourceChanged; virtual;
    procedure PivotFieldsChanged; virtual;
    procedure PivotStructureChanged(Sender: TObject);
    procedure SetDataFilter; virtual;
    procedure ValueFieldsInfoChangeEvent(Sender: TCollection; Item: TCollectionItem; Action: TCollectionNotification);

    property ActualColFlds: TStringList read FActualColFlds;
    property ActualRowFlds: TStringList read FActualRowFlds;
    property ActualValueFields: TValueFieldsCollectionEh read FActualValueFields;

  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    function DataIsEmpty: Boolean;

    procedure RegisterChanges(Value: IPivotDataSourceNotificationEh);
    procedure UnRegisterChanges(Value: IPivotDataSourceNotificationEh);
    property SourceTable: TMemTableEh read FSourceTable;

    procedure BuildPivotData;
    procedure CreateAndFillSourceTable;
    procedure LoadAndBuildPivotData;
    procedure PivotDataStructBeginUpdate;
    procedure PivotDataStructEndUpdate;

  published
    property DataSet: TDataSet read FDataSet write FDataSet;
    property PivotFields: TPivotFieldsEh read FPivotFields write SetPivotFields;
    property DefaultDateTimeSliceLevels: TDateTimeSliceLevelsEh read  FDefaultDateTimeSliceLevels write FDefaultDateTimeSliceLevels default [dtslYearEh, dtslMonthEh, dtslDayEh];

    property ColumnFields: TStringList read FColumnFields write SetColumnFields;
    property RowFields: TStringList read FRowFields write SetRowFields;
    property ValueFieldDefs: TValueFieldsCollectionEh read FValueFieldsInfo write SetValueFieldsInfo;

    property OnLogTimeMetric: TLogTimeMetricEventEh read FOnLogTimeMetric write FOnLogTimeMetric;
  end;

{ TPivotAxisTreeNodeEh }

  TPivotTreeNodeIterativeEvent = procedure (Sender: TPivotAxisTreeNodeEh; Param: TObject) of object;
  TPivotAxisDirectionEh = (padVerticalEh, padHorizontalEh);

  TPivotAxisTreeNodeEh = class(TBaseTreeNodeEh)
  private
    FAxisPos: Integer;

    function GetItem(const Index: Integer): TPivotAxisTreeNodeEh;
    function GetParent: TPivotAxisTreeNodeEh;
  public
    constructor Create; override;

    property AxisPos: Integer read FAxisPos;
    property Expanded;
    property Items[const Index: Integer]: TPivotAxisTreeNodeEh read GetItem; default;
    property Level;
    property Parent: TPivotAxisTreeNodeEh read GetParent;
    property Text;
  end;

{ TPivotAxisGroupingTreeEh }

  TPivotAxisGroupingTreeEh = class(TTreeListEh)
  private
    FAxisDir: TPivotAxisDirectionEh;
    FCurIncAxisNum: Integer;
    FExpandedStateIterativeLevel: Integer;
    FFlatList: TList;
    FGrid: TCustomPivotGridEh;
    FRowNums: TIntegerDynArray;
    FSortOrder: TSortOrderEh;
    FUpdateCount: Integer;

    function CompareAxisValues(AxisPos1, AxisPos2, OppositeAxisPos: Integer): TVariantRelationship;
    function ComparePivotAxisPoses(Node1, Node2: TBaseTreeNodeEh; ParamSort: TObject): Integer;
    function GetActualAxisFlds: TStrings;
    function GetAxisAggrBeforeData: Boolean;
    function GetAxisTable: TMemTableEh;
    function GetFlatList(Index: Integer): TPivotAxisTreeNodeEh;
    function GetFlatListCount: Integer;
    function GetRoot: TPivotAxisTreeNodeEh;
    procedure SetExpandedState(Sender: TPivotAxisTreeNodeEh; Param: TObject);
    procedure SetVisArrayGridNum(Sender: TPivotAxisTreeNodeEh; Param: TObject);

  protected
    procedure FlatListAddItem(Sender: TBaseTreeNodeEh; Param: TObject);
    procedure ExpandedChanged(Node: TBaseTreeNodeEh); override;

  public
    constructor Create(AGrid: TCustomPivotGridEh; ItemClass: TTreeNodeClassEh; AAxisDir: TPivotAxisDirectionEh);
    destructor Destroy; override;

    function Updating: Boolean; reintroduce;

    procedure BeginUpdate;
    procedure BuildFlatList;
    procedure BuildTree;
    procedure EndUpdate;
    procedure ForAllNode(AProg: TTreeNodeIterativeEvent; Param: TObject; RowAggrBeforeData: Boolean; ConsideCollapsed: Boolean);
    procedure SetGridArrayAxisNums;
    procedure SetLevelExpanded(ALevel: Integer; IsExpanded: Boolean);
    procedure SetNextColNum(Sender: TPivotAxisTreeNodeEh; Param: TObject);
    procedure SetNextRowNum(Sender: TPivotAxisTreeNodeEh; Param: TObject);
    procedure SetVisArrayGridNums;
    procedure SortData(Level, PivotGridAxisLine: Integer; ASortOrder: TSortOrderEh); reintroduce; virtual;
    procedure WriteTree(sl: TStrings; AxisAggrBeforeData: Boolean);
    procedure WriteTreeLine(Sender: TBaseTreeNodeEh; Param: TObject);

    property ActualAxisFlds: TStrings read GetActualAxisFlds;
    property AxisAggrBeforeData: Boolean read GetAxisAggrBeforeData;
    property AxisDir: TPivotAxisDirectionEh read FAxisDir;
    property AxisTable: TMemTableEh read GetAxisTable;
    property FlatList[Index: Integer]: TPivotAxisTreeNodeEh read GetFlatList;
    property FlatListCount: Integer read GetFlatListCount;
    property Grid: TCustomPivotGridEh read FGrid;
    property Root: TPivotAxisTreeNodeEh read GetRoot;
  end;

  TPivotCellSignTypeEh = (pcstNonEh, pcstRectangleEh, pcstCircleEh);

{ TPivotCellDrawParamsEh }

  TPivotCellDrawParamsEh = class(TPersistent)
  private
    FAreaCol: Longint;
    FAreaRow: Longint;
    FCol: Longint;
    FColsAxisPos: TVariantDynArray;
    FColsGroupLevel: Integer;
    FDisplayValue: String;
    FDrawState: TGridDrawState;
    FFillColor: TColor;
    FFont: TFont;
    FRow: Longint;
    FRowsAxisPos: TVariantDynArray;
    FRowsGroupLevel: Integer;
    FSignFillColor: TColor;
    FSignFrameColor: TColor;
    FSignType: TPivotCellSignTypeEh;
    FValue: Variant;

  public
    property AreaCol: Longint read FAreaCol;
    property AreaRow: Longint read FAreaRow;
    property Col: Longint read FCol;
    property ColsAxisPos: TVariantDynArray read FColsAxisPos;
    property ColsGroupLevel: Integer read FColsGroupLevel;
    property DrawState: TGridDrawState read FDrawState;
    property Row: Longint read FRow;
    property RowsAxisPos: TVariantDynArray read FRowsAxisPos;
    property RowsGroupLevel: Integer read FRowsGroupLevel;
    property Value: Variant read FValue;

    property DisplayValue: String read FDisplayValue write FDisplayValue;
    property FillColor: TColor read FFillColor write FFillColor;
    property Font: TFont read FFont write FFont;
    property SignFillColor: TColor read FSignFillColor write FSignFillColor;
    property SignFrameColor: TColor read FSignFrameColor write FSignFrameColor;
    property SignType: TPivotCellSignTypeEh read FSignType write FSignType;
  end;

{ TPivotGridCellParamsEh }

  TPivotGridCellParamsEh = class(TPersistent)
  private
    FParentFieldNameFont: Boolean;
    FAxisColor: TColor;
    FAxisFont: TFont;
    FDataColor: TColor;
    FDataFont: TFont;
    FParentAxisFont: Boolean;
    FParentAxisAggregateFont: Boolean;
    FDataAggregateColor: TColor;
    FParentDataFont: Boolean;
    FDataAggregateFont: TFont;
    FFieldNameColor: TColor;
    FParentDataAggregateFont: Boolean;
    FFieldNameFont: TFont;
    FGrid: TCustomPivotGridEh;
    FAxisAggregateFont: TFont;
    procedure SetDataAggregateColor(const Value: TColor);
    procedure SetDataAggregateFont(const Value: TFont);
    procedure SetDataColor(const Value: TColor);
    procedure SetDataFont(const Value: TFont);
    procedure SetFieldNameColor(const Value: TColor);
    procedure SetFieldNameFont(const Value: TFont);
    procedure SetAxisColor(const Value: TColor);
    procedure SetAxisFont(const Value: TFont);
    procedure SetParentDataAggregateFont(const Value: Boolean);
    procedure SetParentDataFont(const Value: Boolean);
    procedure SetParentFieldNameFont(const Value: Boolean);
    procedure SetParentAxisFont(const Value: Boolean);

    procedure RefreshDefaultDataAggregateFont;
    procedure RefreshDefaultDataFont;
    procedure RefreshDefaultFieldNameFont;
    procedure RefreshDefaultAxisFont;
    procedure RefreshDefaultAxisAggregateFont;
    procedure AssignDefaultFontTo(const AFont: TFont);
    procedure FontChanged(Sender: TObject);
    procedure SetAxisAggregateFont(const Value: TFont);
    procedure SetParentAxisAggregateFont(const Value: Boolean);
    function IsAxisAggregateFontStored: Boolean;
    function IsAxisFontStored: Boolean;
    function IsDataAggregateFontStored: Boolean;
    function IsDataFontStored: Boolean;
    function IsFieldNameFontStored: Boolean;

  public
    constructor Create(AGrid: TCustomPivotGridEh);
    destructor Destroy; override;

    function DefaultFont: TFont; virtual;
    function ActualDataColor: TColor; virtual;
    function ActualDataAggregateColor: TColor; virtual;
    function ActualAxisColor: TColor; virtual;
    function ActualFieldNameColor: TColor; virtual;
    property Grid: TCustomPivotGridEh read FGrid;

  published
    property DataColor: TColor read FDataColor write SetDataColor default clDefault;
    property DataFont: TFont read FDataFont write SetDataFont stored IsDataFontStored;
    property DataAggregateColor: TColor read FDataAggregateColor write SetDataAggregateColor default clDefault;
    property DataAggregateFont: TFont read FDataAggregateFont write SetDataAggregateFont stored IsDataAggregateFontStored;
    property AxisColor: TColor read FAxisColor write SetAxisColor default clDefault;
    property AxisFont: TFont read FAxisFont write SetAxisFont stored IsAxisFontStored;
    property AxisAggregateFont: TFont read FAxisAggregateFont write SetAxisAggregateFont stored IsAxisAggregateFontStored;
    property FieldNameColor: TColor read FFieldNameColor write SetFieldNameColor default clDefault;
    property FieldNameFont: TFont read FFieldNameFont write SetFieldNameFont stored IsFieldNameFontStored;

    property ParentDataFont: Boolean read FParentDataFont write SetParentDataFont default True;
    property ParentDataAggregateFont: Boolean read FParentDataAggregateFont write SetParentDataAggregateFont default True;
    property ParentAxisFont: Boolean read FParentAxisFont write SetParentAxisFont default True;
    property ParentAxisAggregateFont: Boolean read FParentAxisAggregateFont write SetParentAxisAggregateFont default True;
    property ParentFieldNameFont: Boolean read FParentFieldNameFont write SetParentFieldNameFont default True;
  end;


{ TPivotGridLineParamsEh }

  TPivotGridLineParamsEh = class(TGridLineColorsEh)
  published
    property DarkColor;
    property BrightColor;
  end;

{$IFDEF FPC}
{$ELSE}

{ TCustomPivotGridPrintServiceEh }

  TCustomPivotGridPrintServiceEh = class(TBaseGridPrintServiceEh)
  private
    FGrid: TCustomPivotGridEh;
    procedure SetGrid(const Value: TCustomPivotGridEh);
  public
    property Grid: TCustomPivotGridEh read FGrid write SetGrid;
  published
    property Scale;
    property FitToPagesWide;
    property FitToPagesTall;
    property ScalingMode;
    property Orientation;
    property ColorSchema;
    property PageFooter;
    property PageHeader;
    property PageMargins;
    property TextBeforeContent;
    property TextAfterContent;

    property OnBeforePrint;
    property OnBeforePrintPage;
    property OnBeforePrintPageContent;
    property OnPrintDataBeforeGrid;
    property OnCalcLayoutDataBeforeGrid;

    property OnAfterPrint;
    property OnAfterPrintPage;
    property OnAfterPrintPageContent;
    property OnPrintDataAfterGrid;
    property OnCalcLayoutDataAfterGrid;

    property OnPrinterSetupDialog;
  end;

{$ENDIF}

{ TCustomPivotGridEh }

  TPivotGridOptionEh = (pgoRowSizingEh, pgoColSizingEh, pgoEditingEh, pgoWantTabEh,
    pgoFieldDraggingEh);
  TPivotGridOptionsEh = set of TPivotGridOptionEh;

  TSpicGridStateEh = (dgsNormal, dgsFilterButtonDown);
  TDropToPosTypeEh = (dtptFieldColsEh, dtptFieldRowsEh);
  TCellAreaEh = (caUnspecifiedEh, caDropDownButtonEh, caSortMarkerEh, caCellBorderEh, caTreeExpandSignEh);

  TCurrentCellMovedEvent = procedure(Grid: TCustomPivotGridEh; OldCurrent: TGridCoord) of object;
  TGetPivotDataCellDrawParamsEventEh = procedure(Grid: TCustomPivotGridEh;
    ACol, ARow: Integer; var Params: TPivotCellDrawParamsEh;
    var Processed: Boolean) of object;

  TCustomPivotGridEh = class(TCustomGridEh, IPivotDataSourceNotificationEh)
  private
    FColsAxisTree: TPivotAxisGroupingTreeEh;
    FDefaultDateTimeSliceLevels: TDateTimeSliceLevelsEh;
    FDragStarted: Boolean;
    FDrawCellParams: TPivotCellDrawParamsEh;
    FFinishLoadingStatusRenderDuration: Integer;
    FGridCellParams: TPivotGridCellParamsEh;
    FLoadingModeBitmap: TBitmap;
    FLoadingModeCallCount : Integer;
    FOnCurrentCellMoved: TCurrentCellMovedEvent;
    FOnDrawDataCell: TGetPivotDataCellDrawParamsEventEh;
    FOnGridDefinitionChanged: TNotifyEvent;
    FOptions: TPivotGridOptionsEh;
    FPivotDataSource: TPivotDataSourceEh;
    FProgressPanel: TPivotProgressIndicatorPanelEh;
    FRowAggrBeforeData: Boolean;
    FRowHeight: Integer;
    FRowLines: Integer;
    FRowsAxisTree: TPivotAxisGroupingTreeEh;
    FShowDataBuildingProgress: Boolean;
    FShowingLoadingMode: Boolean;
    FStartLoadingStatusRenderDuration: Integer;
    {$IFDEF FPC}
    {$ELSE}
    FPrintService: TCustomPivotGridPrintServiceEh;
    {$ENDIF}

    function CalcDefaultRowHeight: Integer;
    function GetActualColFlds: TStringList;
    function GetActualRowFlds: TStringList;
    function GetActualValueFields: TValueFieldsCollectionEh;
    function GetDefaultColWidth: Integer;
    function GetGridCellParams: TPivotGridCellParamsEh;
    function GetGridLineParams: TPivotGridLineParamsEh;
    function GetOptions: TPivotGridOptionsEh;
    function GetPivotRowSortedGridArray(ACol, ARow: Integer): TPivotCellEh;
    function GetSourcePivotFields: TPivotFieldsEh;
    function GetValueForInheritedOptions: TGridOptionsEh;
    function GetVisPivotGridArray(ACol, ARow: Integer): TPivotCellEh;

    procedure AdjustContraData;
    procedure DrawAxisValueCellData(ACol, ARow: Integer; ARect: TRect; AState: TGridDrawState; PivotCel: TPivotCellEh; ShowGroupingSign, ShowValue: Boolean; const DisplayValue: String);
    procedure DrawSortMarker(var ARect: TRect; AState: TGridDrawState; SortOrder: TSortOrderEh);
    procedure GetTopGroupRowCells(var Cells: TPivotRectCellDynArrayEh);
    procedure PaintLoadingMode(RenderDuration: Integer);
    procedure PivotDataSourceChanged;
    procedure SetDefaultColWidth(const Value: Integer);
    procedure SetGridCellParams(const Value: TPivotGridCellParamsEh);
    procedure SetGridLineParams(const Value: TPivotGridLineParamsEh);
    procedure SetOptions(const Value: TPivotGridOptionsEh);
    procedure SetPivotDataSource(const Value: TPivotDataSourceEh);
    procedure SetRowHeight(const Value: Integer);
    procedure SetRowLines(const Value: Integer);
    procedure StartDrag;
    procedure UnpaintLoadingMode(RenderDuration: Integer);

    {$IFDEF FPC}
    {$ELSE}
    procedure CMCancelMode(var Message: TCMCancelMode); message CM_CancelMode;
    {$ENDIF}
    procedure CMHintShow(var Message: TCMHintShow); message CM_HINTSHOW;
    procedure CMFontChanged(var Message: TMessage); message CM_FONTCHANGED;

    procedure WMCancelMode(var Message: TWMCancelMode); message WM_CANCELMODE;
    procedure WMEraseBkgnd(var Message: TWmEraseBkgnd); message WM_ERASEBKGND;
    procedure WMHScroll(var Message: TWMHScroll); message WM_HSCROLL;
    procedure WMKillFocus(var Message: TWMKillFocus); message WM_KillFocus;
    procedure WMLButtonDown(var Message: TWMLButtonDown); message WM_LBUTTONDOWN;
    procedure WMSize(var Message: TWMSize); message WM_SIZE;
    procedure WMVScroll(var Message: TWMVScroll); message WM_VSCROLL;

  protected
    FDummyPivotField: TPivotFieldEh;
    FVisPivotGridArray: TPivotGridArray;
    PivotGridArray: TPivotGridArray;
    FDrawenCellArr: array of TGridCoord;
    FDataSortColNum: Integer;
    FDataSortSortOrder: TSortOrderEh;
    FDragCell: TPivotCellEh;
    FDragPos: Integer;
    FDropToCell: TPivotCellEh;
    FDropToPos: Integer;
    FHotTrackEditButton: Integer;
    FInTitleFilterListbox: TPopupListboxEh;
    FInTitleFilterListboxVisible: Boolean;
    FInTitleFilterPivotField: TPivotFieldEh;
    FPivotArrayDataColCount: Integer;
    FPivotArrayDataRowCount: Integer;
    FRowsCaptionExpandedState: TBooleanDynArray;
    FShowGrandTotalCols, FShowGrandTotalRows: Boolean;
    FSpicGridState: TSpicGridStateEh;
    FStartDataCol, FStartDataRow: Integer;
    FTrackingStateRect: TRect;
    FValsCapDeltaRow: Integer; 
    FVisPivotColCount: Integer;
    FVisPivotRowCount: Integer;
    FDataBuildingProgressDelay: Integer;
    FVisPivotColCountAffix: Integer;
    FFullVisPivotColCount: Integer;

    function CanHotTackCell(X, Y: Integer): Boolean; override;
    function CreateHorzScrollBarPanelControl: TGridScrollBarPanelControlEh; override;
    function CreateScrollBar(AKind: TScrollBarKind): TGridScrollBarEh; override;
    function FullRedrawOnSroll: Boolean; override;
    function GetEditText(ACol, ARow: Longint): string; override;
    function IsSmoothHorzScroll: Boolean; override;
    function IsSmoothVertScroll: Boolean; override;
    function NeedBufferedPaint: Boolean; override;
    function WMCheckCanSendDoubleClicks(var MouseEvent: TWMMouse): Boolean; override;
    function CreateGridLineColors: TGridLineColorsEh; override;
    function FixedColsSizingAllowed: Boolean; override;

    function CanMouseTrackMode: Boolean;
    function GetInTitleFilterForm: TFilterDropDownForm; virtual;
    function GetInTitleFilterListbox: TPopupListboxEh; virtual;
    function GetMouseHitCellState(Cell: TGridCoord; MousePos: TPoint; CellRect: TRect; var StateRect: TRect): TSpicGridStateEh;
    function GridTextIsVisible: Boolean;

    function GrandTotalColVisible: Boolean;
    function GrandTotalRowVisible: Boolean;

    function DragDropHitTestInfo(X, Y: Integer; var LinePos: TPoint; var LineSize: Integer; var DropToPos: Integer; var FDragToField: TPivotCellEh): Boolean;
    function GetCellHitArea(PivotCel: TPivotCellEh; const ACellRect: TRect; CellMousePos: TPoint): TCellAreaEh;
    function CreateGridCellParams: TPivotGridCellParamsEh; virtual;
    function CheckCellAreaDrawn(ACol, ARow: Integer): Boolean; virtual;

    procedure DoStartDrag(var DragObject: TDragObject); override;
    procedure DragOver(Source: TObject; X, Y: Integer; State: TDragState; var Accept: Boolean); override;
    procedure DoEndDrag(Target: TObject; X, Y: Integer); override;
    procedure DrawCell(ACol, ARow: Longint; ARect: TRect; AState: TGridDrawState); override;
    procedure Paint; override;
    procedure SelectionChanged(const OldSel: TGridRect); override;
    procedure CellMouseClick(const Cell: TGridCoord; Button: TMouseButton; Shift: TShiftState; const ACellRect: TRect; const GridMousePos, CellMousePos: TPoint); override;
    procedure CellMouseDown(const Cell: TGridCoord; Button: TMouseButton; Shift: TShiftState; const ACellRect: TRect; const GridMousePos, CellMousePos: TPoint); override;
    procedure MouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer); override;
    procedure MouseMove(Shift: TShiftState; X, Y: Integer); override;
    procedure CheckDrawCellBorder(ACol, ARow: Integer; BorderType: TGridCellBorderTypeEh; var IsDraw: Boolean; var BorderColor: TColor; var IsExtent: Boolean); override;
    procedure CurrentCellMoved(OldCurrent: TGridCoord); override;
    procedure CreateWnd; override;

    procedure ColExpandedChanged(Node: TPivotAxisTreeNodeEh);
    procedure DrawAxisValueCell(ACol, ARow: Integer; ARect: TRect; AState: TGridDrawState; PivotCel: TPivotCellEh); virtual;
    procedure DrawCellSign(ACol, ARow: Integer; var ARect: TRect; FDrawCellParams: TPivotCellDrawParamsEh);
    procedure DrawDataCell(ACol, ARow: Integer; ARect: TRect; AState: TGridDrawState; PivotCel: TPivotCellEh); virtual;
    procedure DrawFieldNameCell(ACol, ARow: Integer; ARect: TRect; AState: TGridDrawState; PivotCel: TPivotCellEh); virtual;
    procedure DrawFilterButton(var ARect: TRect; AState: TGridDrawState); virtual;
    procedure DrawTopGroupRowValues; virtual;
    procedure RowExpandedChanged(Node: TPivotAxisTreeNodeEh); virtual;
    procedure SetAxisRowExpandedState(PivotCel: TPivotCellEh; Expanded: Boolean); virtual;
    procedure DoCopyAction; virtual;

    procedure FillDrawCellParams(ADrawCellParams: TPivotCellDrawParamsEh; ACol, ARow: Integer; ARect: TRect; AState: TGridDrawState; PivotCel: TPivotCellEh); virtual;
    procedure FillDataCellParams(ADrawCellParams: TPivotCellDrawParamsEh; ACol, ARow: Integer; const ARect: TRect; AState: TGridDrawState; PivotCel: TPivotCellEh); virtual;
    procedure FillAxisValueCellParams(ADrawCellParams: TPivotCellDrawParamsEh; ACol, ARow: Integer; const ARect: TRect; AState: TGridDrawState; PivotCel: TPivotCellEh); virtual;
    procedure FillFieldNameCellParams(ADrawCellParams: TPivotCellDrawParamsEh; ACol, ARow: Integer; const ARect: TRect; AState: TGridDrawState; PivotCel: TPivotCellEh); virtual;
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure KeyPress(var Key: Char); override;
    procedure Resize; override;

    function CheckTopGroupRowMouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer): Boolean; virtual;

    procedure FilterFormCloseUp(Accept: Boolean); virtual;
    procedure FilterFormDropDown(Cell: TGridCoord; const CellRect, ButtonRect: TRect);
    procedure FilterListboxCloseUp(Accept: Boolean); virtual;
    procedure FilterListboxDropDown(Cell: TGridCoord; const CellRect, ButtonRect: TRect);
    procedure GetFilterButtonRect(const ACellRect: TRect; var AButtonRect, AGrossRect: TRect; ARightToLeftAlignment: Boolean);
    procedure GetVisPivotGridArrayPosByAxisCell(PivotCel: TPivotCellEh; var VisCellCoord: TPoint);
    procedure GetVisPivotGridArrayPosByAxisTreeNode(RowsTreeNode: TPivotAxisTreeNodeEh; var VisCellCoord: TPoint);
    procedure InTitleFilterDropDownFormCallbackProc(DropDownForm: TCustomForm; Accept: Boolean; DynParams: TDynVarsEh; SysParams: TDropDownFormSysParams);
    procedure InTitleFilterListKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure InTitleFilterListKeyPress(Sender: TObject; var Key: Char);
    procedure InTitleFilterListMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure PaintEmptyDataInfo; virtual;
    procedure PaintInplaceButton(Canvas: TCanvas; ButtonStyle: TEditButtonStyleEh; Rect, ClipRect: TRect; DownButton: Integer; Active, Flat, Enabled: Boolean; ParentColor: TColor; Bitmap: TBitmap; TransparencyPercent: Byte; imList: TCustomImageList; ImageIndex: Integer);
    procedure GridCellParamsChanged; virtual;
    procedure SetCellDrawn(ACol, ARow: Integer); virtual;
    procedure MergeRectForCell(ACol, ARow: Integer; var ARect: TRect; AState: TGridDrawState; PivotCel: TPivotCellEh); virtual;

    procedure SetPivotGridArrayVars;
    procedure BuildGridArrayColsMeasures;
    procedure BuildGridArrayRowsMeasures;
    procedure BuildGridArrayValuesMeasures;

    procedure PivotDataSourceChange(Sender: TObject);
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;

    procedure ShowProgressPanel(ElapsedTime: LongWord; Percent: Integer);
    procedure HideProgressPanel;

    property PivotRowSortedGridArray[ACol, ARow: Integer]: TPivotCellEh read GetPivotRowSortedGridArray;

  protected
    { IPivotDataSourceNotificationEh }
    function PivotDataChangeProgress(Sender: TObject; ElapsedTime: LongWord; Percent: Integer): Boolean;

    procedure PivotFieldsChanged(Sender: TObject);
    procedure PivotStructureChanged(Sender: TObject);
    procedure PivotDataChanged(Sender: TObject);
    procedure PivotDataStartChanging(Sender: TObject);
    procedure PivotDataFinishChanging(Sender: TObject);
    procedure PivotDataChangingCanceled(Sender: TObject);

  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    procedure StartLoadingStatus(RenderDuration: Integer = -1);
    procedure FinishLoadingStatus(RenderDuration: Integer = -1);

    function DataSourceIsEmpty: Boolean; virtual;
    function GrandTotalColCount: Integer;
    function GrandTotalRowCount: Integer;
    function GridIsEmpty: Boolean;
    function ActualColFldsCount: Integer;
    function ActualRowFldsCount: Integer;

    procedure AggregateGridForColumns;
    procedure AggregateGridForColumnsLevel(ColsLevel: Integer);
    procedure DragDrop(Source: TObject; X, Y: Integer); override;
    procedure EmptyGridData;
    procedure FillGridDataForActualRowFlds;
    procedure FinishDragFrom(Source: TObject); virtual;
    procedure GetValueFieldsInfoFromCommaText(const ACommaText: String);
    procedure MakeColSortingTree;
    procedure MakePivotGridArray;
    procedure MakeRowSortingTree;
    procedure MakeVisPivotGridArray;
    procedure MoveAggrRowBeforeData;
    procedure RebuildGrid;
    procedure ResortColSortingTree;
    procedure ResortRowSortingTree;
    procedure SetColLevelExpanded(AColLevel: Integer; IsExpanded: Boolean; const KeyValues: TVariantDynArray);
    procedure SetGridSizes(GridSizeChanged: Boolean);
    procedure SetPivotGridArraySize(AColCount, ARowCount: Integer);
    procedure SetRowHeightsColumnWidths;
    procedure SetRowLevelExpanded(ARowLevel: Integer; IsExpanded: Boolean; const KeyValues: TVariantDynArray);
    procedure VisPivotPosToSrcArrayPos(AVisCol, AVisRow: Integer; var ASrcCol, ASrcRow: Integer);

    property ActualColFlds: TStringList read GetActualColFlds;
    property ActualRowFlds: TStringList read GetActualRowFlds;
    property ActualValueFields: TValueFieldsCollectionEh read GetActualValueFields;
    property Col;
    property ColsAxisTree: TPivotAxisGroupingTreeEh read FColsAxisTree;
    property DefaultDateTimeSliceLevels: TDateTimeSliceLevelsEh read  FDefaultDateTimeSliceLevels write FDefaultDateTimeSliceLevels default [dtslYearEh, dtslMonthEh, dtslDayEh];
    property PivotDataSource: TPivotDataSourceEh read FPivotDataSource write SetPivotDataSource;
    property PivotFields: TPivotFieldsEh read GetSourcePivotFields;
    property Row;
    property RowAggrBeforeData: Boolean read FRowAggrBeforeData write FRowAggrBeforeData;
    property RowsAxisTree: TPivotAxisGroupingTreeEh read FRowsAxisTree;
    property VisPivotGridArray[ACol, ARow: Integer]: TPivotCellEh read GetVisPivotGridArray;
    property GridLineParams: TPivotGridLineParamsEh read GetGridLineParams write SetGridLineParams;
    property GridCellParams: TPivotGridCellParamsEh read GetGridCellParams write SetGridCellParams;
    property Options: TPivotGridOptionsEh read GetOptions write SetOptions default [pgoColSizingEh, pgoEditingEh, pgoWantTabEh, pgoFieldDraggingEh];
    property RowHeight: Integer read FRowHeight write SetRowHeight default 0;
    property RowLines: Integer read FRowLines write SetRowLines default 0;
    property DefaultColWidth: Integer read GetDefaultColWidth write SetDefaultColWidth default 80;
    property DataBuildingProgressDelay: Integer read FDataBuildingProgressDelay write FDataBuildingProgressDelay default 1000;
    property ShowDataBuildingProgress: Boolean read FShowDataBuildingProgress write FShowDataBuildingProgress default True;
    {$IFDEF FPC}
    {$ELSE}
    property PrintService: TCustomPivotGridPrintServiceEh read FPrintService;
    {$ENDIF}

    property OnCellMouseClick;
    property OnCellMouseDown;
    property OnCurrentCellMoved: TCurrentCellMovedEvent read FOnCurrentCellMoved write FOnCurrentCellMoved;
    property OnDrawDataCell: TGetPivotDataCellDrawParamsEventEh read FOnDrawDataCell write FOnDrawDataCell;
    property OnGridDefinitionChanged: TNotifyEvent read FOnGridDefinitionChanged write FOnGridDefinitionChanged;
  end;

{ TPivotGridEh }

  TPivotGridEh = class(TCustomPivotGridEh)
  public
    property Canvas;
    property Col;
    property Row;
    property RowCount;
    property ColCount;
    property ColWidths;
    property RowHeights;

  published
    property DataBuildingProgressDelay;
    property DefaultColWidth;
    property GridCellParams;
    property GridLineParams;
    property Options;
    property PivotDataSource;
    property RowHeight;
    property RowLines;
    property ShowDataBuildingProgress;

    property OnDrawDataCell;

    property Align;
    property Anchors;
    property BiDiMode;
    property BorderStyle;
    property Color;
    property Constraints;
    property ContraColCount;
    {$IFDEF FPC}
    {$ELSE}
    property Ctl3D;
    {$ENDIF}
    property DragCursor;
    property DragKind;
    property DragMode;
    property Enabled;
    property FixedColor;
    property Flat;
    property Font;
    property HorzScrollBar;
    {$IFDEF FPC}
    {$ELSE}
    property ImeMode;
    property ImeName;
    {$ENDIF}
    property ParentBiDiMode;
    {$IFDEF FPC}
    {$ELSE}
    property ParentCtl3D;
    property PrintService;
    {$ENDIF}
    property ParentColor;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property SelectionDrawParams;
    property ShowHint;
    property TabOrder;
    property TabStop;
{$IFDEF EH_LIB_13}
    property Touch;
{$ENDIF}
    property VertScrollBar;
    property Visible;

{$IFDEF EH_LIB_5}
    property OnContextPopup;
{$ENDIF}
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDock;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
{$IFDEF EH_LIB_13}
    property OnGesture;
{$ENDIF}
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
    property OnStartDock;
    property OnStartDrag;
  end;

{ TPivotGridFilterPopupListboxItemEh }

  TPivotGridFilterPopupListboxItemEh = class(TPopupListboxItemEh)
  protected
    function GetPivotField(Listbox: TCustomListboxEh): TPivotFieldEh;
    function GetGrid(Listbox: TCustomListboxEh): TCustomPivotGridEh;
  end;

{ TPopupListboxItemEhData }

  TPopupListboxItemEhData = class(TPivotGridFilterPopupListboxItemEh)
  protected
    function CanFocus(Sender: TCustomListboxEh; ItemIndex: Integer): Boolean; override;
    procedure DrawItem(Sender: TCustomListboxEh; ItemIndex: Integer; ARect: TRect; State: TGridDrawState); override;
    procedure KeyPress(Sender: TCustomListboxEh; ItemIndex: Integer; var Key: Char; Shift: TShiftState; var IsCloseListbox: Boolean); override;
    procedure MouseDown(Sender: TCustomListboxEh; ItemIndex: Integer; InItemPos: TPoint; Button: TMouseButton; Shift: TShiftState); override;
    procedure MouseMove(Sender: TCustomListboxEh; ItemIndex: Integer; InItemPos: TPoint; Shift: TShiftState); override;
    procedure MouseUp(Sender: TCustomListboxEh; ItemIndex: Integer; InItemPos: TPoint; Button: TMouseButton; Shift: TShiftState; var IsCloseListbox: Boolean); override;

  public
    function CloseOnExecute(Sender: TCustomListboxEh; ItemIndex: Integer): Boolean; override;
    procedure Execute(Sender: TCustomListboxEh; ItemIndex: Integer; InItemPos: TPoint; Shift: TShiftState); override;
  end;

  TPopupListboxItemEhSpecType = (ptFilterSpecSelectAll, ptFilterApply, ptFilterRowLine);

{ TPopupListboxItemEhSpec }

  TPopupListboxItemEhSpec = class(TPivotGridFilterPopupListboxItemEh)
  protected
    FType: TPopupListboxItemEhSpecType;

    function CanFocus(Sender: TCustomListboxEh; ItemIndex: Integer): Boolean; override;
    procedure DrawItem(Sender: TCustomListboxEh; ItemIndex: Integer; ARect: TRect; State: TGridDrawState); override;
    procedure MouseDown(Sender: TCustomListboxEh; ItemIndex: Integer; InItemPos: TPoint; Button: TMouseButton; Shift: TShiftState); override;
    procedure MouseUp(Sender: TCustomListboxEh; ItemIndex: Integer; InItemPos: TPoint; Button: TMouseButton; Shift: TShiftState; var IsCloseListbox: Boolean); override;

  public
    constructor Create(AType: TPopupListboxItemEhSpecType);
    procedure Execute(Sender: TCustomListboxEh; ItemIndex: Integer; InItemPos: TPoint; Shift: TShiftState); override;
  end;

  TPivotGridDrabObj = class(TDragControlObjectEx)
  protected
    function GetDragCursor(Accepted: Boolean; X, Y: Integer): TCursor; override;
  public
    FDragCell: TPivotCellEh;
    FPivotField: TPivotFieldEh;
    FPivotFieldName: String;
    FPivotFieldValueInfo: TPivotFieldValueInfoEh;

    destructor Destroy; override;
  end;

{ TPivotGridSelectionInfoPanel }

  TPivotGridSelectionInfoPanel = class (TCustomControl)
  private
    function GetGrid: TCustomPivotGridEh;
    function InfoWidth: Integer;
    procedure WMEraseBkgnd(var Message: TWmEraseBkgnd); message WM_ERASEBKGND;

  protected
    FAggrText: String;
    procedure GridSelectionChanged;
    procedure Paint; override;

  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    function HaveData: Boolean;
    property Grid: TCustomPivotGridEh read GetGrid;
  end;

  { TPivotGridScrollBarPanelControl }

  TPivotGridScrollBarPanelControl = class(TGridScrollBarPanelControlEh)
  private
    FSelInfoPanel: TPivotGridSelectionInfoPanel;

  protected
    procedure Resize; override;
    procedure CreateHandle; override;

  public
    constructor Create(AOwner: TComponent; AKind: TScrollBarKind); reintroduce;
    destructor Destroy; override;
    procedure GridSelectionChanged;
  end;

{ TPivotGridScrollBarEh }

  TPivotGridScrollBarEh = class(TGridScrollBarEh)
  protected
    function CheckScrollBarMustBeShown: Boolean; override;
  end;

{ TPivotProgressBarEh }

  TPivotProgressBarEh = class(TProgressBar)
  private
    FCanvas: TControlCanvas;
    FBufferBitmap: TBitmap;
    procedure WMPaint(var Message: TWMPaint); message WM_PAINT;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

{ TPivotProgressIndicatorPanelEh }

  TPivotProgressIndicatorPanelEh = class(TCustomPanel)
  private
    FControlFlipChildren: Boolean;
    procedure CMBiDiModeChanged(var Message: TMessage); message CM_BIDIMODECHANGED;
  protected
    FProgressBar: TPivotProgressBarEh;
    FLabelNote: TLabel;
    FLabelEsc: TLabel;
    FLabelTimePassed: TLabel;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

  TPivotGridExportAsOLEXLSOptionEh = (pgxlsColoredEh, pgxlsDataAsEditText);
  TPivotGridExportAsOLEXLSOptionsEh = set of TPivotGridExportAsOLEXLSOptionEh;

procedure StartWait;
procedure StopWait;

function ExportPivotGridEhToOleExcel(Grid: TCustomPivotGridEh;
  Options: TPivotGridExportAsOLEXLSOptionsEh
//  ;const FileName: String = ''
  ): Variant;

var
  hcrDropToGarbageEh: HCursor = 0;
  hcrDropToGarbageIndexEh: TCursor;
  FlatPivotProgressIndicator: Boolean = True;
  SliceDisplayNames: array[TFieldDateTimeSliceLevelEh] of String;
  PivotAggrValueDisplayNames: array[TPivotValueTypeEh] of String;
  
const
  SliceNames: array[TFieldDateTimeSliceLevelEh] of String =
    ('Non', 'Year', 'Quarter', 'Month', 'Week',
     'Day', 'Hour', 'Min', 'Sec', 'MSec');

  SliceNamesDisplaFormat: array[TFieldDateTimeSliceLevelEh] of String =
    ('', 'YYYY', 'YYYY/MM', 'YYYY/MM', 'YYYY/WW',
     'YYYY/MM/DD', 'YYYY/MM/DD HH', 'YYYY/MM/DD HH:NN', 'YYYY/MM/DD HH:NN:SS', '');

  PivotAggrValueTypes: array[TPivotValueTypeEh] of String = ('Non', 'Sum',
    'Count', 'Avarge', 'Max', 'Min', 'Count Distinct', 'Custom');

implementation
