{*******************************************************}
{                                                       }
{                        EhLib v8.2                     }
{                                                       }
{              Tool controls for PivotGridEh            }
{                      Build 8.2.005                    }
{                                                       }
{   Copyright (c) 2014-2015 by Dmitry V. Bolshakov      }
{                                                       }
{*******************************************************}

{$I EhLib.Inc}

unit PivotGridToolsEh;

interface

uses
{$IFDEF EH_LIB_17} System.Generics.Collections, {$ENDIF}
  Windows, SysUtils, Messages, Classes, Controls, Forms, StdCtrls,
{$IFDEF EH_LIB_5} Contnrs, {$ENDIF}
{$IFDEF EH_LIB_6} Variants, Types, {$ENDIF}
{$IFDEF EH_LIB_7} Themes, UxTheme, {$ENDIF}
{$IFDEF EH_LIB_17} System.UITypes, {$ENDIF}
{$IFDEF CIL}
  EhLibVCLNET,
  WinUtils,
{$ELSE}
  {$IFDEF FPC}
  EhLibLCL, DBGridsEh, LMessages, LCLType, Win32Extra,
  {$ELSE}
  EhLibVCL, DBGridEh,
  {$ENDIF}
{$ENDIF}
  PivotGridsEh,
  MemTableEh, MemTableDataEh, TypInfo,
  GridsEh, DBCtrlsEh, ToolCtrlsEh,
  DBUtilsEh, GridToolCtrlsEh,
  DBCtrls, Db, Menus, Registry, Graphics, IniFiles, ImgList, StdActns,
  ActnList, ExtCtrls, DynVarsEh, ToolWin, Comctrls, CommCtrl;

type
  TCustomPivotGridFieldsEh = class;
  TCustomPivotGridToolBoxEh = class;

  TPivotGridFieldsTypeEh = (sgftFieldsListEh, sgftColFieldsEh, sgftRowFieldsEh,
    sgftValueFieldsEh);

{ TCustomPivotGridFieldsEh }

  TCustomPivotGridFieldsEh = class(TCustomDBGridEh)
  private
    FListType: TPivotGridFieldsTypeEh;
    FDataTable: TMemTableEh;
    FDataSource: TDataSource;
    FDragPivotField: TPivotFieldEh;
    FDragPivotFieldName: String;
    FPivotFieldValueInfo: TPivotFieldValueInfoEh;
    function GetPivotDataSourceEh: TPivotDataSourceEh;
  protected
    function DragDropHitTestInfo(X, Y: Integer; var LinePos: TPoint; var LineSize: Integer; var DropToPos: Integer): Boolean;
    function IsAutoFitColWidthsActiveMode: Boolean; override;

    procedure CellMouseDown(const Cell: TGridCoord; Button: TMouseButton; Shift: TShiftState; const ACellRect: TRect; const GridMousePos, CellMousePos: TPoint); override;
    procedure CellMouseClick(const Cell: TGridCoord; Button: TMouseButton; Shift: TShiftState; const ACellRect: TRect; const GridMousePos, CellMousePos: TPoint); override;

    procedure DoStartDrag(var DragObject: TDragObject); override;
    procedure DoEndDrag(Target: TObject; X, Y: Integer); override;
    procedure DragOver(Source: TObject; X, Y: Integer; State: TDragState; var Accept: Boolean); override;
    procedure CreateWnd; override;
  public
    FPivotDataSource: TPivotDataSourceEh;
    FToolBox: TCustomPivotGridToolBoxEh;

    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    procedure DragDrop(Source: TObject; X, Y: Integer); override;
    procedure PivotFieldGridDefinitionChanged;
    procedure GetColCellParamsEvent(Sender: TObject; EditMode: Boolean; Params: TColCellParamsEh);

    property ListType: TPivotGridFieldsTypeEh read FListType write FListType;
    property DataTable: TMemTableEh read FDataTable;
    property DataSource: TDataSource read FDataSource;
//    property PivotGrid: TCustomPivotGridEh read GetPivotGrid;
    property PivotDataSource: TPivotDataSourceEh read GetPivotDataSourceEh;

  end;

{ TCustomPivotGridToolBoxEh }

  TCustomPivotGridToolBoxEh = class(TCustomPanel, IPivotDataSourceNotificationEh)
  private
    FFieldStructChanging: Boolean;
    FInternalPivotGridAssigning: Boolean;
    FPivotDataSource: TPivotDataSourceEh;

    function GetColumnFields: TStringList;
    function GetRowFields: TStringList;
    function GetValueFieldsInfo: TValueFieldsCollectionEh;
    procedure SetPivotDataSource(const Value: TPivotDataSourceEh);
  protected
    FPivotGrid: TCustomPivotGridEh;

    FFieldListGrid: TCustomPivotGridFieldsEh;
    FRowsLabel: TLabel;
    FRowsListGrid: TCustomPivotGridFieldsEh;
    FColsLabel: TLabel;
    FColsListGrid: TCustomPivotGridFieldsEh;
    FValsLabel: TLabel;
    FValsListGrid: TCustomPivotGridFieldsEh;

    FFieldListPanel: TPanel;
    FPivotDataPanel: TPanel;
    FSplitter: TSplitter;

    procedure FieldStructChanged(Sender: TObject);
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure PivotDataPanelResize(Sender: TObject);
    procedure PivotGridDefinitionChanged(Sender: TCustomPivotGridEh);
    procedure ValueFieldsInfoChangeEvent(Sender: TCollection; Item: TCollectionItem; Action: TCollectionNotification);

    procedure PivotFieldsChanged(Sender: TObject);
    procedure PivotStructureChanged(Sender: TObject);
    procedure PivotDataChanged(Sender: TObject);
    procedure PivotDataStartChanging(Sender: TObject);
    function PivotDataChangeProgress(Sender: TObject; ElapsedTime: LongWord; Percent: Integer): Boolean;
    procedure PivotDataFinishChanging(Sender: TObject);
    procedure PivotDataChangingCanceled(Sender: TObject);
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    procedure ApplyDefinitionToGrid;

    property PivotDataSource: TPivotDataSourceEh read FPivotDataSource write SetPivotDataSource;
    property ColumnFields: TStringList read GetColumnFields;
    property RowFields: TStringList read GetRowFields;
    property ValueFieldsInfo: TValueFieldsCollectionEh read GetValueFieldsInfo;// write SetValueFieldsInfo;
  end;

{ TPivotGridToolBoxEh }

  TPivotGridToolBoxEh = class(TCustomPivotGridToolBoxEh)
  published
    property PivotDataSource;

    property Align;
    property Alignment;
    property Anchors;
    property AutoSize;

    {$IFDEF FPC}
    {$ELSE}
    property BevelEdges;
    property BevelInner;
    property BevelKind;
    property BevelOuter;
    property BevelWidth;
    {$ENDIF}
    property BiDiMode;
    property BorderWidth;
    property BorderStyle;
    property Caption;
    property Color;
    property Constraints;
    {$IFDEF FPC}
    {$ELSE}
    property Ctl3D;
    {$ENDIF}
    property UseDockManager default True;
    property DockSite;
    property DoubleBuffered;
    property DragCursor;
    property DragKind;
    property DragMode;
    property Enabled;
    property FullRepaint;
    property Font;
    {$IFDEF FPC}
    {$ELSE}
    property Locked;
    {$ENDIF}
{$IFDEF EH_LIB_16}
    property Padding;
{$ENDIF}
    property ParentBiDiMode;
    {$IFDEF FPC}
    {$ELSE}
    property ParentBackground;
    property ParentCtl3D;
    {$ENDIF}
    property ParentColor;
{$IFDEF EH_LIB_16}
    property ParentDoubleBuffered;
{$ENDIF}
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
{$IFDEF EH_LIB_16}
    property ShowCaption;
{$ENDIF}
    property ShowHint;
{$IFDEF EH_LIB_17}
    property StyleElements;
{$ENDIF}
    property TabOrder;
    property TabStop;
{$IFDEF EH_LIB_13}
    property Touch;
    property VerticalAlignment;
{$ENDIF}
    property Visible;

{$IFDEF EH_LIB_13}
    property OnAlignInsertBefore;
    property OnAlignPosition;
{$ENDIF}
    {$IFDEF FPC}
    {$ELSE}
    property OnCanResize;
    {$ENDIF}
    property OnClick;
    property OnConstrainedResize;
    property OnContextPopup;
    property OnDockDrop;
    property OnDockOver;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDock;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
{$IFDEF EH_LIB_13}
    property OnGesture;
    property OnMouseActivate;
    property OnMouseEnter;
    property OnMouseLeave;
    property OnMouseMove;
{$ENDIF}
    property OnGetSiteInfo;
    property OnMouseDown;
    property OnMouseUp;
    property OnResize;
    property OnStartDock;
    property OnStartDrag;
    property OnUnDock;
  end;

implementation
