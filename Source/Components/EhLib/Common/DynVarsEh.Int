{*******************************************************}
{                                                       }
{                     EhLib v8.2                        }
{              Realizatoion Collection of               }
{                 Dynamic Variables                     }
{                   (Build 8.2.03)                      }
{                                                       }
{        Copyright (c) 2012 by EhLib Team and           }
{                Dmitry V. Bolshakov                    }
{                                                       }
{*******************************************************}

{$I EhLib.Inc}

unit DynVarsEh;


interface

uses
  Classes, SysUtils, Variants;

type
  TCustomDynVarsEh = class;
  TDynVarsEh = class;

  IDynParamsInteractableEh = interface
   ['{6ECDE882-A30A-4D34-9C4F-6618FB50CB76}']
//    function GetValues: TStrings;
    procedure SetInDynParams(DynParams: TDynVarsEh);
    procedure GetOutDynParams(var DynParams: TDynVarsEh);
  end;

{ TCustomDynVarEh }

  TCustomDynVarEh = class(TCollectionItem)
  private
    FData : Variant;
    FIsDummy: Boolean;
    FName: string;
    FOwnerWhenDummy: TCustomDynVarsEh;
    function GetAsBoolean: Boolean;
    function GetAsCurrency: Currency;
    function GetAsDateTime: TDateTime;
    function GetAsFloat: Double;
    function GetAsInteger: Longint;
    function GetAsRefObject: TObject;
    function GetAsString: string;
    function GetIsNull: Boolean;
    function IsEqual(Value: TCustomDynVarEh): Boolean;
    procedure SetAsBoolean(Value: Boolean);
    procedure SetAsCurrency(const Value: Currency);
    procedure SetAsDateTime(const Value: TDateTime);
    procedure SetAsFloat(const Value: Double);
    procedure SetAsInteger(Value: Longint);
    procedure SetAsRefObject(const Value: TObject);
    procedure SetAsString(const Value: string);
    procedure SetData(const Value: Variant);
    procedure SetName(const Value: string);
  protected
    function GetDisplayName: string; override;

    procedure AssignTo(Dest: TPersistent); override;

    property IsDummy: Boolean read FIsDummy;
    property AsBoolean: Boolean read GetAsBoolean write SetAsBoolean;
    property AsCurrency: Currency read GetAsCurrency write SetAsCurrency;
    property AsDateTime: TDateTime read GetAsDateTime write SetAsDateTime;
    property AsFloat: Double read GetAsFloat write SetAsFloat;
    property AsInteger: LongInt read GetAsInteger write SetAsInteger;
    property AsRefObject: TObject read GetAsRefObject write SetAsRefObject;
    property AsString: string read GetAsString write SetAsString;
    property IsNull: Boolean read GetIsNull;
    property Name: string read FName write SetName;
    property Value: Variant read FData write SetData;
  public
    constructor Create(Collection: TCollection); overload; override;
    constructor CreateAsDummy(AOwnerWhenDummy: TCustomDynVarsEh); overload;
    destructor Destroy; override;

    function VarCollection: TCustomDynVarsEh;
    procedure Clear;
  end;

  TCustomDynVarClassEh = class of TCustomDynVarEh;

{ TDynVarEh }

  TDynVarEh = class(TCustomDynVarEh)
  public
    property AsBoolean;
    property AsCurrency;
    property AsDateTime;
    property AsFloat;
    property AsInteger;
    property AsRefObject;
    property AsString;
    property IsNull;
  published
    property Name;
    property Value;
  end;

{ TCustomDynVarsEh }

  TCustomDynVarsEh = class(TCollection)
  private
    FDummyVar: TCustomDynVarEh;
    FOwner: TPersistent;
    FOnChange: TNotifyEvent;
    function GetDynVar(const VarName: string): TCustomDynVarEh;
    function GetItem(Index: Integer): TCustomDynVarEh;
    procedure DeleteDynVar(DynVar: TCustomDynVarEh); overload;
    procedure SetItem(Index: Integer; Value: TCustomDynVarEh);
  protected
    function GetInitDummyVar(const AVarName: String): TCustomDynVarEh;
    function GetOwner: TPersistent; override;
    procedure AssignTo(Dest: TPersistent); override;
    procedure CreateDynVarFromDummy(ADummyVar: TCustomDynVarEh);
    procedure Update(Item: TCollectionItem); override;
    property DummyVar: TCustomDynVarEh read FDummyVar;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
  public
    constructor Create(Owner: TPersistent); overload;
    destructor Destroy; override;

    function GetDynVarClass: TCustomDynVarClassEh; virtual;
    function CreateDynVar(const VarName: string; const AValue: TObject): TCustomDynVarEh; overload;
    function CreateDynVar(const VarName: string; const AValue: Variant): TCustomDynVarEh; overload;
    function FindDynVar(const VarName: string) : TCustomDynVarEh;
    function IsEqual(Value: TCustomDynVarsEh): Boolean;
    function VarExists(const VarName: string): Boolean;

    procedure AddDynVar(Value: TCustomDynVarEh);
    procedure AssignValues(Value: TCustomDynVarsEh);
    procedure DeleteDynVar(const VarName: string); overload;
    procedure RemoveDynVar(Value: TCustomDynVarEh);

    property Items[Index: Integer]: TCustomDynVarEh read GetItem write SetItem;
    property DynVar[const VarName: string]: TCustomDynVarEh read GetDynVar; default;
  end;

  TCustomDynVarsClassEh = class of TCustomDynVarsEh;

{ TDynVarsEh }

  TDynVarsEh = class(TCustomDynVarsEh)
  private
    function GetDynVar(const VarName: string): TDynVarEh;
    function GetItem(Index: Integer): TDynVarEh;
    procedure SetItem(Index: Integer; Value: TDynVarEh);
  public
    function CreateDynVar(const VarName: string; const AValue: TObject): TDynVarEh; overload;
    function CreateDynVar(const VarName: string; const AValue: Variant): TDynVarEh; overload;
    function FindDynVar(const VarName: string) : TDynVarEh;
    function GetDynVarClass: TCustomDynVarClassEh; override;
    property Items[Index: Integer]: TDynVarEh read GetItem write SetItem;
    property DynVar[const VarName: string]: TDynVarEh read GetDynVar; default;
  end;

{ TStringVarEh }

  TStringVarEh = class(TCustomDynVarEh)
  private
    function GetValue: String;
    procedure SetValue(const AValue: String);
  public
  published
    property Name;
    property Value: String read GetValue write SetValue;
  end;

{ TStringVarsEh }

  TStringVarsEh = class(TCustomDynVarsEh)
  private
    function GetItem(Index: Integer): TStringVarEh;
    procedure SetItem(Index: Integer; Value: TStringVarEh);
    function GetVarValue(const VarName: string): String;
    procedure SetVarValue(const VarName, Value: String);
  public
    function CreateDynVar(const VarName: string; const AValue: String): TStringVarEh; overload;
    function FindDynVar(const VarName: string) : TStringVarEh;
    function GetDynVarClass: TCustomDynVarClassEh; override;
    function GetAsTextString: String;
    procedure SetFromTextString(const TextString: String);
    property Items[Index: Integer]: TStringVarEh read GetItem write SetItem;
    property Str[const VarName: string]: String read GetVarValue write SetVarValue; default;
    property OnChange;
  end;

implementation
